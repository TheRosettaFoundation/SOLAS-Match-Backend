// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Task_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Task_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Task_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Task_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Task_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::Task* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Task_2eproto);
    return ::descriptor_table_Task_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kCommentFieldNumber = 4,
    kDeadlineFieldNumber = 5,
    kCreatedTimeFieldNumber = 7,
    kSourceLocaleFieldNumber = 8,
    kTargetLocaleFieldNumber = 9,
    kIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kWordCountFieldNumber = 6,
    kTaskTypeFieldNumber = 10,
    kTaskStatusFieldNumber = 11,
    kPublishedFieldNumber = 12,
  };
  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string comment = 4;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string deadline = 5;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const std::string& deadline() const;
  void set_deadline(const std::string& value);
  void set_deadline(std::string&& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  std::string* mutable_deadline();
  std::string* release_deadline();
  void set_allocated_deadline(std::string* deadline);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deadline();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deadline(
      std::string* deadline);
  private:
  const std::string& _internal_deadline() const;
  void _internal_set_deadline(const std::string& value);
  std::string* _internal_mutable_deadline();
  public:

  // optional string createdTime = 7;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  void set_createdtime(const std::string& value);
  void set_createdtime(std::string&& value);
  void set_createdtime(const char* value);
  void set_createdtime(const char* value, size_t size);
  std::string* mutable_createdtime();
  std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createdtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createdtime(
      std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
  bool has_sourcelocale() const;
  private:
  bool _internal_has_sourcelocale() const;
  public:
  void clear_sourcelocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_sourcelocale();
  public:
  void unsafe_arena_set_allocated_sourcelocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_sourcelocale();

  // optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
  bool has_targetlocale() const;
  private:
  bool _internal_has_targetlocale() const;
  public:
  void clear_targetlocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& targetlocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_targetlocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_targetlocale();
  void set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_targetlocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_targetlocale();
  public:
  void unsafe_arena_set_allocated_targetlocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_targetlocale();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 projectId = 2;
  bool has_projectid() const;
  private:
  bool _internal_has_projectid() const;
  public:
  void clear_projectid();
  ::PROTOBUF_NAMESPACE_ID::int32 projectid() const;
  void set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_projectid() const;
  void _internal_set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wordCount = 6;
  bool has_wordcount() const;
  private:
  bool _internal_has_wordcount() const;
  public:
  void clear_wordcount();
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount() const;
  void set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wordcount() const;
  void _internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 taskType = 10;
  bool has_tasktype() const;
  private:
  bool _internal_has_tasktype() const;
  public:
  void clear_tasktype();
  ::PROTOBUF_NAMESPACE_ID::int32 tasktype() const;
  void set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tasktype() const;
  void _internal_set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 taskStatus = 11;
  bool has_taskstatus() const;
  private:
  bool _internal_has_taskstatus() const;
  public:
  void clear_taskstatus();
  ::PROTOBUF_NAMESPACE_ID::int32 taskstatus() const;
  void set_taskstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskstatus() const;
  void _internal_set_taskstatus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool published = 12;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  bool published() const;
  void set_published(bool value);
  private:
  bool _internal_published() const;
  void _internal_set_published(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deadline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 projectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tasktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskstatus_;
  bool published_;
  friend struct ::TableStruct_Task_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Task

// optional int32 id = 1;
inline bool Task::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Task::has_id() const {
  return _internal_has_id();
}
inline void Task::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.id)
  return _internal_id();
}
inline void Task::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void Task::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.id)
}

// optional int32 projectId = 2;
inline bool Task::_internal_has_projectid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Task::has_projectid() const {
  return _internal_has_projectid();
}
inline void Task::clear_projectid() {
  projectid_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_projectid() const {
  return projectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::projectid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.projectId)
  return _internal_projectid();
}
inline void Task::_internal_set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  projectid_ = value;
}
inline void Task::set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_projectid(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.projectId)
}

// optional string title = 3;
inline bool Task::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Task::has_title() const {
  return _internal_has_title();
}
inline void Task::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Task::title() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.title)
  return _internal_title();
}
inline void Task::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline std::string* Task::mutable_title() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.title)
  return _internal_mutable_title();
}
inline const std::string& Task::_internal_title() const {
  return title_.Get();
}
inline void Task::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline void Task::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline void Task::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline std::string* Task::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_title() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.title)
}
inline std::string* Task::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Task.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.title)
}

// optional string comment = 4;
inline bool Task::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Task::has_comment() const {
  return _internal_has_comment();
}
inline void Task::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Task::comment() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.comment)
  return _internal_comment();
}
inline void Task::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline std::string* Task::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.comment)
  return _internal_mutable_comment();
}
inline const std::string& Task::_internal_comment() const {
  return comment_.Get();
}
inline void Task::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline void Task::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline void Task::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline std::string* Task::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_comment() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.comment)
}
inline std::string* Task::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Task.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.comment)
}

// optional string deadline = 5;
inline bool Task::_internal_has_deadline() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Task::has_deadline() const {
  return _internal_has_deadline();
}
inline void Task::clear_deadline() {
  deadline_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Task::deadline() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.deadline)
  return _internal_deadline();
}
inline void Task::set_deadline(const std::string& value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline std::string* Task::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.deadline)
  return _internal_mutable_deadline();
}
inline const std::string& Task::_internal_deadline() const {
  return deadline_.Get();
}
inline void Task::_internal_set_deadline(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_deadline(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline void Task::set_deadline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline void Task::set_deadline(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline std::string* Task::_internal_mutable_deadline() {
  _has_bits_[0] |= 0x00000004u;
  return deadline_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_deadline() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.deadline)
  if (!_internal_has_deadline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_deadline(std::string* deadline) {
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deadline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.deadline)
}
inline std::string* Task::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Task.deadline)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_deadline(
    std::string* deadline) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deadline, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.deadline)
}

// optional int32 wordCount = 6;
inline bool Task::_internal_has_wordcount() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Task::has_wordcount() const {
  return _internal_has_wordcount();
}
inline void Task::clear_wordcount() {
  wordcount_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_wordcount() const {
  return wordcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::wordcount() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.wordCount)
  return _internal_wordcount();
}
inline void Task::_internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  wordcount_ = value;
}
inline void Task::set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wordcount(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.wordCount)
}

// optional string createdTime = 7;
inline bool Task::_internal_has_createdtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Task::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void Task::clear_createdtime() {
  createdtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Task::createdtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  return _internal_createdtime();
}
inline void Task::set_createdtime(const std::string& value) {
  _internal_set_createdtime(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline std::string* Task::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  return _internal_mutable_createdtime();
}
inline const std::string& Task::_internal_createdtime() const {
  return createdtime_.Get();
}
inline void Task::_internal_set_createdtime(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_createdtime(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline void Task::set_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline void Task::set_createdtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline std::string* Task::_internal_mutable_createdtime() {
  _has_bits_[0] |= 0x00000008u;
  return createdtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_createdtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return createdtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  createdtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}
inline std::string* Task::unsafe_arena_release_createdtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Task.createdTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return createdtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_createdtime(
    std::string* createdtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  createdtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createdtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.createdTime)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
inline bool Task::_internal_has_sourcelocale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || sourcelocale_ != nullptr);
  return value;
}
inline bool Task::has_sourcelocale() const {
  return _internal_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::_internal_sourcelocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = sourcelocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::sourcelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  return _internal_sourcelocale();
}
inline void Task::unsafe_arena_set_allocated_sourcelocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::release_sourcelocale() {
  auto temp = unsafe_arena_release_sourcelocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::unsafe_arena_release_sourcelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  _has_bits_[0] &= ~0x00000010u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::_internal_mutable_sourcelocale() {
  _has_bits_[0] |= 0x00000010u;
  if (sourcelocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    sourcelocale_ = p;
  }
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::mutable_sourcelocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
  return _internal_mutable_sourcelocale();
}
inline void Task::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  if (sourcelocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale)->GetArena();
    if (message_arena != submessage_arena) {
      sourcelocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcelocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sourcelocale_ = sourcelocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.sourceLocale)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
inline bool Task::_internal_has_targetlocale() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || targetlocale_ != nullptr);
  return value;
}
inline bool Task::has_targetlocale() const {
  return _internal_has_targetlocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::_internal_targetlocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = targetlocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Task::targetlocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  return _internal_targetlocale();
}
inline void Task::unsafe_arena_set_allocated_targetlocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale_);
  }
  targetlocale_ = targetlocale;
  if (targetlocale) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::release_targetlocale() {
  auto temp = unsafe_arena_release_targetlocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::unsafe_arena_release_targetlocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  _has_bits_[0] &= ~0x00000020u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = targetlocale_;
  targetlocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::_internal_mutable_targetlocale() {
  _has_bits_[0] |= 0x00000020u;
  if (targetlocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    targetlocale_ = p;
  }
  return targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Task::mutable_targetlocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
  return _internal_mutable_targetlocale();
}
inline void Task::set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale_);
  }
  if (targetlocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale)->GetArena();
    if (message_arena != submessage_arena) {
      targetlocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetlocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  targetlocale_ = targetlocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Task.targetLocale)
}

// optional int32 taskType = 10;
inline bool Task::_internal_has_tasktype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Task::has_tasktype() const {
  return _internal_has_tasktype();
}
inline void Task::clear_tasktype() {
  tasktype_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_tasktype() const {
  return tasktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::tasktype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.taskType)
  return _internal_tasktype();
}
inline void Task::_internal_set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tasktype_ = value;
}
inline void Task::set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.taskType)
}

// optional int32 taskStatus = 11;
inline bool Task::_internal_has_taskstatus() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Task::has_taskstatus() const {
  return _internal_has_taskstatus();
}
inline void Task::clear_taskstatus() {
  taskstatus_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_taskstatus() const {
  return taskstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::taskstatus() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.taskStatus)
  return _internal_taskstatus();
}
inline void Task::_internal_set_taskstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  taskstatus_ = value;
}
inline void Task::set_taskstatus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskstatus(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.taskStatus)
}

// optional bool published = 12;
inline bool Task::_internal_has_published() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Task::has_published() const {
  return _internal_has_published();
}
inline void Task::clear_published() {
  published_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Task::_internal_published() const {
  return published_;
}
inline bool Task::published() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Task.published)
  return _internal_published();
}
inline void Task::_internal_set_published(bool value) {
  _has_bits_[0] |= 0x00000800u;
  published_ = value;
}
inline void Task::set_published(bool value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Task.published)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Task_2eproto
