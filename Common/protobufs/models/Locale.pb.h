// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Locale.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Locale_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Locale_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Locale_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Locale_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Locale_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class Locale;
class LocaleDefaultTypeInternal;
extern LocaleDefaultTypeInternal _Locale_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::Locale* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class Locale PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Locale) */ {
 public:
  inline Locale() : Locale(nullptr) {};
  virtual ~Locale();

  Locale(const Locale& from);
  Locale(Locale&& from) noexcept
    : Locale() {
    *this = ::std::move(from);
  }

  inline Locale& operator=(const Locale& from) {
    CopyFrom(from);
    return *this;
  }
  inline Locale& operator=(Locale&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Locale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Locale* internal_default_instance() {
    return reinterpret_cast<const Locale*>(
               &_Locale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Locale& a, Locale& b) {
    a.Swap(&b);
  }
  inline void Swap(Locale* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Locale* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Locale* New() const final {
    return CreateMaybeMessage<Locale>(nullptr);
  }

  Locale* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Locale>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Locale& from);
  void MergeFrom(const Locale& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Locale* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.Locale";
  }
  protected:
  explicit Locale(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Locale_2eproto);
    return ::descriptor_table_Locale_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageNameFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kCountryNameFieldNumber = 3,
    kCountryCodeFieldNumber = 4,
  };
  // optional string languageName = 1;
  bool has_languagename() const;
  private:
  bool _internal_has_languagename() const;
  public:
  void clear_languagename();
  const std::string& languagename() const;
  void set_languagename(const std::string& value);
  void set_languagename(std::string&& value);
  void set_languagename(const char* value);
  void set_languagename(const char* value, size_t size);
  std::string* mutable_languagename();
  std::string* release_languagename();
  void set_allocated_languagename(std::string* languagename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_languagename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_languagename(
      std::string* languagename);
  private:
  const std::string& _internal_languagename() const;
  void _internal_set_languagename(const std::string& value);
  std::string* _internal_mutable_languagename();
  public:

  // optional string languageCode = 2;
  bool has_languagecode() const;
  private:
  bool _internal_has_languagecode() const;
  public:
  void clear_languagecode();
  const std::string& languagecode() const;
  void set_languagecode(const std::string& value);
  void set_languagecode(std::string&& value);
  void set_languagecode(const char* value);
  void set_languagecode(const char* value, size_t size);
  std::string* mutable_languagecode();
  std::string* release_languagecode();
  void set_allocated_languagecode(std::string* languagecode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_languagecode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_languagecode(
      std::string* languagecode);
  private:
  const std::string& _internal_languagecode() const;
  void _internal_set_languagecode(const std::string& value);
  std::string* _internal_mutable_languagecode();
  public:

  // optional string countryName = 3;
  bool has_countryname() const;
  private:
  bool _internal_has_countryname() const;
  public:
  void clear_countryname();
  const std::string& countryname() const;
  void set_countryname(const std::string& value);
  void set_countryname(std::string&& value);
  void set_countryname(const char* value);
  void set_countryname(const char* value, size_t size);
  std::string* mutable_countryname();
  std::string* release_countryname();
  void set_allocated_countryname(std::string* countryname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_countryname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_countryname(
      std::string* countryname);
  private:
  const std::string& _internal_countryname() const;
  void _internal_set_countryname(const std::string& value);
  std::string* _internal_mutable_countryname();
  public:

  // optional string countryCode = 4;
  bool has_countrycode() const;
  private:
  bool _internal_has_countrycode() const;
  public:
  void clear_countrycode();
  const std::string& countrycode() const;
  void set_countrycode(const std::string& value);
  void set_countrycode(std::string&& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  std::string* mutable_countrycode();
  std::string* release_countrycode();
  void set_allocated_countrycode(std::string* countrycode);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_countrycode();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_countrycode(
      std::string* countrycode);
  private:
  const std::string& _internal_countrycode() const;
  void _internal_set_countrycode(const std::string& value);
  std::string* _internal_mutable_countrycode();
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Locale)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr languagename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr languagecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  friend struct ::TableStruct_Locale_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Locale

// optional string languageName = 1;
inline bool Locale::_internal_has_languagename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Locale::has_languagename() const {
  return _internal_has_languagename();
}
inline void Locale::clear_languagename() {
  languagename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Locale::languagename() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  return _internal_languagename();
}
inline void Locale::set_languagename(const std::string& value) {
  _internal_set_languagename(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline std::string* Locale::mutable_languagename() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  return _internal_mutable_languagename();
}
inline const std::string& Locale::_internal_languagename() const {
  return languagename_.Get();
}
inline void Locale::_internal_set_languagename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  languagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Locale::set_languagename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  languagename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline void Locale::set_languagename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  languagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline void Locale::set_languagename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  languagename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline std::string* Locale::_internal_mutable_languagename() {
  _has_bits_[0] |= 0x00000001u;
  return languagename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Locale::release_languagename() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  if (!_internal_has_languagename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return languagename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_languagename(std::string* languagename) {
  if (languagename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  languagename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), languagename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}
inline std::string* Locale::unsafe_arena_release_languagename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Locale.languageName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return languagename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Locale::unsafe_arena_set_allocated_languagename(
    std::string* languagename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (languagename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  languagename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      languagename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageName)
}

// optional string languageCode = 2;
inline bool Locale::_internal_has_languagecode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Locale::has_languagecode() const {
  return _internal_has_languagecode();
}
inline void Locale::clear_languagecode() {
  languagecode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Locale::languagecode() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  return _internal_languagecode();
}
inline void Locale::set_languagecode(const std::string& value) {
  _internal_set_languagecode(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline std::string* Locale::mutable_languagecode() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  return _internal_mutable_languagecode();
}
inline const std::string& Locale::_internal_languagecode() const {
  return languagecode_.Get();
}
inline void Locale::_internal_set_languagecode(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  languagecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Locale::set_languagecode(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  languagecode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline void Locale::set_languagecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  languagecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline void Locale::set_languagecode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  languagecode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline std::string* Locale::_internal_mutable_languagecode() {
  _has_bits_[0] |= 0x00000002u;
  return languagecode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Locale::release_languagecode() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  if (!_internal_has_languagecode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return languagecode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_languagecode(std::string* languagecode) {
  if (languagecode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  languagecode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), languagecode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}
inline std::string* Locale::unsafe_arena_release_languagecode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return languagecode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Locale::unsafe_arena_set_allocated_languagecode(
    std::string* languagecode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (languagecode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  languagecode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      languagecode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.languageCode)
}

// optional string countryName = 3;
inline bool Locale::_internal_has_countryname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Locale::has_countryname() const {
  return _internal_has_countryname();
}
inline void Locale::clear_countryname() {
  countryname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Locale::countryname() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  return _internal_countryname();
}
inline void Locale::set_countryname(const std::string& value) {
  _internal_set_countryname(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline std::string* Locale::mutable_countryname() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  return _internal_mutable_countryname();
}
inline const std::string& Locale::_internal_countryname() const {
  return countryname_.Get();
}
inline void Locale::_internal_set_countryname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  countryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Locale::set_countryname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  countryname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline void Locale::set_countryname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  countryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline void Locale::set_countryname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  countryname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline std::string* Locale::_internal_mutable_countryname() {
  _has_bits_[0] |= 0x00000004u;
  return countryname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Locale::release_countryname() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  if (!_internal_has_countryname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return countryname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_countryname(std::string* countryname) {
  if (countryname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  countryname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countryname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}
inline std::string* Locale::unsafe_arena_release_countryname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Locale.countryName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return countryname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Locale::unsafe_arena_set_allocated_countryname(
    std::string* countryname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (countryname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  countryname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      countryname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryName)
}

// optional string countryCode = 4;
inline bool Locale::_internal_has_countrycode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Locale::has_countrycode() const {
  return _internal_has_countrycode();
}
inline void Locale::clear_countrycode() {
  countrycode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Locale::countrycode() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  return _internal_countrycode();
}
inline void Locale::set_countrycode(const std::string& value) {
  _internal_set_countrycode(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline std::string* Locale::mutable_countrycode() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  return _internal_mutable_countrycode();
}
inline const std::string& Locale::_internal_countrycode() const {
  return countrycode_.Get();
}
inline void Locale::_internal_set_countrycode(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Locale::set_countrycode(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  countrycode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline void Locale::set_countrycode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline void Locale::set_countrycode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  countrycode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline std::string* Locale::_internal_mutable_countrycode() {
  _has_bits_[0] |= 0x00000008u;
  return countrycode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Locale::release_countrycode() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  if (!_internal_has_countrycode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return countrycode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Locale::set_allocated_countrycode(std::string* countrycode) {
  if (countrycode != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  countrycode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrycode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}
inline std::string* Locale::unsafe_arena_release_countrycode() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return countrycode_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Locale::unsafe_arena_set_allocated_countrycode(
    std::string* countrycode) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (countrycode != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  countrycode_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      countrycode, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Locale.countryCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Locale_2eproto
