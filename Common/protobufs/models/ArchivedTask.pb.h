// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArchivedTask.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ArchivedTask_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ArchivedTask_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ArchivedTask_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ArchivedTask_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ArchivedTask_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class ArchivedTask;
class ArchivedTaskDefaultTypeInternal;
extern ArchivedTaskDefaultTypeInternal _ArchivedTask_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::ArchivedTask* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::ArchivedTask>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class ArchivedTask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.ArchivedTask) */ {
 public:
  inline ArchivedTask() : ArchivedTask(nullptr) {};
  virtual ~ArchivedTask();

  ArchivedTask(const ArchivedTask& from);
  ArchivedTask(ArchivedTask&& from) noexcept
    : ArchivedTask() {
    *this = ::std::move(from);
  }

  inline ArchivedTask& operator=(const ArchivedTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArchivedTask& operator=(ArchivedTask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArchivedTask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArchivedTask* internal_default_instance() {
    return reinterpret_cast<const ArchivedTask*>(
               &_ArchivedTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArchivedTask& a, ArchivedTask& b) {
    a.Swap(&b);
  }
  inline void Swap(ArchivedTask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArchivedTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArchivedTask* New() const final {
    return CreateMaybeMessage<ArchivedTask>(nullptr);
  }

  ArchivedTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArchivedTask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArchivedTask& from);
  void MergeFrom(const ArchivedTask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArchivedTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.ArchivedTask";
  }
  protected:
  explicit ArchivedTask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ArchivedTask_2eproto);
    return ::descriptor_table_ArchivedTask_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kCommentFieldNumber = 4,
    kDeadlineFieldNumber = 5,
    kCreatedTimeFieldNumber = 7,
    kTaskStatusFieldNumber = 11,
    kFileNameFieldNumber = 15,
    kContentTypeFieldNumber = 16,
    kUploadTimeFieldNumber = 17,
    kPrerequisitesFieldNumber = 20,
    kArchivedDateFieldNumber = 22,
    kSourceLocaleFieldNumber = 8,
    kTargetLocaleFieldNumber = 9,
    kIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kWordCountFieldNumber = 6,
    kTaskTypeFieldNumber = 10,
    kPublishedFieldNumber = 12,
    kVersionFieldNumber = 14,
    kUserIdClaimedFieldNumber = 18,
    kUserIdArchivedFieldNumber = 19,
    kUserIdTaskCreatorFieldNumber = 21,
  };
  // optional string title = 3;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string comment = 4;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string deadline = 5;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const std::string& deadline() const;
  void set_deadline(const std::string& value);
  void set_deadline(std::string&& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  std::string* mutable_deadline();
  std::string* release_deadline();
  void set_allocated_deadline(std::string* deadline);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deadline();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deadline(
      std::string* deadline);
  private:
  const std::string& _internal_deadline() const;
  void _internal_set_deadline(const std::string& value);
  std::string* _internal_mutable_deadline();
  public:

  // optional string createdTime = 7;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  void set_createdtime(const std::string& value);
  void set_createdtime(std::string&& value);
  void set_createdtime(const char* value);
  void set_createdtime(const char* value, size_t size);
  std::string* mutable_createdtime();
  std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createdtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createdtime(
      std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional string taskStatus = 11;
  bool has_taskstatus() const;
  private:
  bool _internal_has_taskstatus() const;
  public:
  void clear_taskstatus();
  const std::string& taskstatus() const;
  void set_taskstatus(const std::string& value);
  void set_taskstatus(std::string&& value);
  void set_taskstatus(const char* value);
  void set_taskstatus(const char* value, size_t size);
  std::string* mutable_taskstatus();
  std::string* release_taskstatus();
  void set_allocated_taskstatus(std::string* taskstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_taskstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_taskstatus(
      std::string* taskstatus);
  private:
  const std::string& _internal_taskstatus() const;
  void _internal_set_taskstatus(const std::string& value);
  std::string* _internal_mutable_taskstatus();
  public:

  // optional string fileName = 15;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filename(
      std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string contentType = 16;
  bool has_contenttype() const;
  private:
  bool _internal_has_contenttype() const;
  public:
  void clear_contenttype();
  const std::string& contenttype() const;
  void set_contenttype(const std::string& value);
  void set_contenttype(std::string&& value);
  void set_contenttype(const char* value);
  void set_contenttype(const char* value, size_t size);
  std::string* mutable_contenttype();
  std::string* release_contenttype();
  void set_allocated_contenttype(std::string* contenttype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_contenttype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_contenttype(
      std::string* contenttype);
  private:
  const std::string& _internal_contenttype() const;
  void _internal_set_contenttype(const std::string& value);
  std::string* _internal_mutable_contenttype();
  public:

  // optional string uploadTime = 17;
  bool has_uploadtime() const;
  private:
  bool _internal_has_uploadtime() const;
  public:
  void clear_uploadtime();
  const std::string& uploadtime() const;
  void set_uploadtime(const std::string& value);
  void set_uploadtime(std::string&& value);
  void set_uploadtime(const char* value);
  void set_uploadtime(const char* value, size_t size);
  std::string* mutable_uploadtime();
  std::string* release_uploadtime();
  void set_allocated_uploadtime(std::string* uploadtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uploadtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uploadtime(
      std::string* uploadtime);
  private:
  const std::string& _internal_uploadtime() const;
  void _internal_set_uploadtime(const std::string& value);
  std::string* _internal_mutable_uploadtime();
  public:

  // optional string prerequisites = 20;
  bool has_prerequisites() const;
  private:
  bool _internal_has_prerequisites() const;
  public:
  void clear_prerequisites();
  const std::string& prerequisites() const;
  void set_prerequisites(const std::string& value);
  void set_prerequisites(std::string&& value);
  void set_prerequisites(const char* value);
  void set_prerequisites(const char* value, size_t size);
  std::string* mutable_prerequisites();
  std::string* release_prerequisites();
  void set_allocated_prerequisites(std::string* prerequisites);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prerequisites();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prerequisites(
      std::string* prerequisites);
  private:
  const std::string& _internal_prerequisites() const;
  void _internal_set_prerequisites(const std::string& value);
  std::string* _internal_mutable_prerequisites();
  public:

  // optional string archivedDate = 22;
  bool has_archiveddate() const;
  private:
  bool _internal_has_archiveddate() const;
  public:
  void clear_archiveddate();
  const std::string& archiveddate() const;
  void set_archiveddate(const std::string& value);
  void set_archiveddate(std::string&& value);
  void set_archiveddate(const char* value);
  void set_archiveddate(const char* value, size_t size);
  std::string* mutable_archiveddate();
  std::string* release_archiveddate();
  void set_allocated_archiveddate(std::string* archiveddate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_archiveddate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_archiveddate(
      std::string* archiveddate);
  private:
  const std::string& _internal_archiveddate() const;
  void _internal_set_archiveddate(const std::string& value);
  std::string* _internal_mutable_archiveddate();
  public:

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
  bool has_sourcelocale() const;
  private:
  bool _internal_has_sourcelocale() const;
  public:
  void clear_sourcelocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_sourcelocale();
  public:
  void unsafe_arena_set_allocated_sourcelocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_sourcelocale();

  // optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
  bool has_targetlocale() const;
  private:
  bool _internal_has_targetlocale() const;
  public:
  void clear_targetlocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& targetlocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_targetlocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_targetlocale();
  void set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_targetlocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_targetlocale();
  public:
  void unsafe_arena_set_allocated_targetlocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_targetlocale();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 projectId = 2;
  bool has_projectid() const;
  private:
  bool _internal_has_projectid() const;
  public:
  void clear_projectid();
  ::PROTOBUF_NAMESPACE_ID::int32 projectid() const;
  void set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_projectid() const;
  void _internal_set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wordCount = 6;
  bool has_wordcount() const;
  private:
  bool _internal_has_wordcount() const;
  public:
  void clear_wordcount();
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount() const;
  void set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wordcount() const;
  void _internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 taskType = 10;
  bool has_tasktype() const;
  private:
  bool _internal_has_tasktype() const;
  public:
  void clear_tasktype();
  ::PROTOBUF_NAMESPACE_ID::int32 tasktype() const;
  void set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tasktype() const;
  void _internal_set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool published = 12;
  bool has_published() const;
  private:
  bool _internal_has_published() const;
  public:
  void clear_published();
  bool published() const;
  void set_published(bool value);
  private:
  bool _internal_published() const;
  void _internal_set_published(bool value);
  public:

  // optional int32 version = 14;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userIdClaimed = 18;
  bool has_useridclaimed() const;
  private:
  bool _internal_has_useridclaimed() const;
  public:
  void clear_useridclaimed();
  ::PROTOBUF_NAMESPACE_ID::int32 useridclaimed() const;
  void set_useridclaimed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useridclaimed() const;
  void _internal_set_useridclaimed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userIdArchived = 19;
  bool has_useridarchived() const;
  private:
  bool _internal_has_useridarchived() const;
  public:
  void clear_useridarchived();
  ::PROTOBUF_NAMESPACE_ID::int32 useridarchived() const;
  void set_useridarchived(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useridarchived() const;
  void _internal_set_useridarchived(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userIdTaskCreator = 21;
  bool has_useridtaskcreator() const;
  private:
  bool _internal_has_useridtaskcreator() const;
  public:
  void clear_useridtaskcreator();
  ::PROTOBUF_NAMESPACE_ID::int32 useridtaskcreator() const;
  void set_useridtaskcreator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useridtaskcreator() const;
  void _internal_set_useridtaskcreator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.ArchivedTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deadline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contenttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uploadtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prerequisites_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr archiveddate_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 projectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 tasktype_;
  bool published_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 useridclaimed_;
  ::PROTOBUF_NAMESPACE_ID::int32 useridarchived_;
  ::PROTOBUF_NAMESPACE_ID::int32 useridtaskcreator_;
  friend struct ::TableStruct_ArchivedTask_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArchivedTask

// optional int32 id = 1;
inline bool ArchivedTask::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ArchivedTask::has_id() const {
  return _internal_has_id();
}
inline void ArchivedTask::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.id)
  return _internal_id();
}
inline void ArchivedTask::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  id_ = value;
}
inline void ArchivedTask::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.id)
}

// optional int32 projectId = 2;
inline bool ArchivedTask::_internal_has_projectid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ArchivedTask::has_projectid() const {
  return _internal_has_projectid();
}
inline void ArchivedTask::clear_projectid() {
  projectid_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_projectid() const {
  return projectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::projectid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.projectId)
  return _internal_projectid();
}
inline void ArchivedTask::_internal_set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  projectid_ = value;
}
inline void ArchivedTask::set_projectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_projectid(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.projectId)
}

// optional string title = 3;
inline bool ArchivedTask::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArchivedTask::has_title() const {
  return _internal_has_title();
}
inline void ArchivedTask::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArchivedTask::title() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
  return _internal_title();
}
inline void ArchivedTask::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}
inline std::string* ArchivedTask::mutable_title() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
  return _internal_mutable_title();
}
inline const std::string& ArchivedTask::_internal_title() const {
  return title_.Get();
}
inline void ArchivedTask::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}
inline void ArchivedTask::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}
inline void ArchivedTask::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}
inline std::string* ArchivedTask::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_title() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}
inline std::string* ArchivedTask::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.title)
}

// optional string comment = 4;
inline bool ArchivedTask::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArchivedTask::has_comment() const {
  return _internal_has_comment();
}
inline void ArchivedTask::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ArchivedTask::comment() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
  return _internal_comment();
}
inline void ArchivedTask::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}
inline std::string* ArchivedTask::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
  return _internal_mutable_comment();
}
inline const std::string& ArchivedTask::_internal_comment() const {
  return comment_.Get();
}
inline void ArchivedTask::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}
inline void ArchivedTask::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}
inline void ArchivedTask::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}
inline std::string* ArchivedTask::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_comment() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}
inline std::string* ArchivedTask::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.comment)
}

// optional string deadline = 5;
inline bool ArchivedTask::_internal_has_deadline() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArchivedTask::has_deadline() const {
  return _internal_has_deadline();
}
inline void ArchivedTask::clear_deadline() {
  deadline_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ArchivedTask::deadline() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
  return _internal_deadline();
}
inline void ArchivedTask::set_deadline(const std::string& value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}
inline std::string* ArchivedTask::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
  return _internal_mutable_deadline();
}
inline const std::string& ArchivedTask::_internal_deadline() const {
  return deadline_.Get();
}
inline void ArchivedTask::_internal_set_deadline(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_deadline(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}
inline void ArchivedTask::set_deadline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}
inline void ArchivedTask::set_deadline(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}
inline std::string* ArchivedTask::_internal_mutable_deadline() {
  _has_bits_[0] |= 0x00000004u;
  return deadline_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_deadline() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
  if (!_internal_has_deadline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_deadline(std::string* deadline) {
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deadline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}
inline std::string* ArchivedTask::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_deadline(
    std::string* deadline) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deadline, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.deadline)
}

// optional int32 wordCount = 6;
inline bool ArchivedTask::_internal_has_wordcount() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ArchivedTask::has_wordcount() const {
  return _internal_has_wordcount();
}
inline void ArchivedTask::clear_wordcount() {
  wordcount_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_wordcount() const {
  return wordcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::wordcount() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.wordCount)
  return _internal_wordcount();
}
inline void ArchivedTask::_internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  wordcount_ = value;
}
inline void ArchivedTask::set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wordcount(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.wordCount)
}

// optional string createdTime = 7;
inline bool ArchivedTask::_internal_has_createdtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ArchivedTask::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void ArchivedTask::clear_createdtime() {
  createdtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ArchivedTask::createdtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
  return _internal_createdtime();
}
inline void ArchivedTask::set_createdtime(const std::string& value) {
  _internal_set_createdtime(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}
inline std::string* ArchivedTask::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
  return _internal_mutable_createdtime();
}
inline const std::string& ArchivedTask::_internal_createdtime() const {
  return createdtime_.Get();
}
inline void ArchivedTask::_internal_set_createdtime(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_createdtime(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}
inline void ArchivedTask::set_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}
inline void ArchivedTask::set_createdtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}
inline std::string* ArchivedTask::_internal_mutable_createdtime() {
  _has_bits_[0] |= 0x00000008u;
  return createdtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_createdtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return createdtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  createdtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}
inline std::string* ArchivedTask::unsafe_arena_release_createdtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return createdtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_createdtime(
    std::string* createdtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  createdtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createdtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.createdTime)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 8;
inline bool ArchivedTask::_internal_has_sourcelocale() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || sourcelocale_ != nullptr);
  return value;
}
inline bool ArchivedTask::has_sourcelocale() const {
  return _internal_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::_internal_sourcelocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = sourcelocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::sourcelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.sourceLocale)
  return _internal_sourcelocale();
}
inline void ArchivedTask::unsafe_arena_set_allocated_sourcelocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.sourceLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::release_sourcelocale() {
  auto temp = unsafe_arena_release_sourcelocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::unsafe_arena_release_sourcelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.sourceLocale)
  _has_bits_[0] &= ~0x00000400u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::_internal_mutable_sourcelocale() {
  _has_bits_[0] |= 0x00000400u;
  if (sourcelocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    sourcelocale_ = p;
  }
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::mutable_sourcelocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.sourceLocale)
  return _internal_mutable_sourcelocale();
}
inline void ArchivedTask::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  if (sourcelocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale)->GetArena();
    if (message_arena != submessage_arena) {
      sourcelocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcelocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sourcelocale_ = sourcelocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.sourceLocale)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale targetLocale = 9;
inline bool ArchivedTask::_internal_has_targetlocale() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || targetlocale_ != nullptr);
  return value;
}
inline bool ArchivedTask::has_targetlocale() const {
  return _internal_has_targetlocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::_internal_targetlocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = targetlocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& ArchivedTask::targetlocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.targetLocale)
  return _internal_targetlocale();
}
inline void ArchivedTask::unsafe_arena_set_allocated_targetlocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale_);
  }
  targetlocale_ = targetlocale;
  if (targetlocale) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.targetLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::release_targetlocale() {
  auto temp = unsafe_arena_release_targetlocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::unsafe_arena_release_targetlocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.targetLocale)
  _has_bits_[0] &= ~0x00000800u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = targetlocale_;
  targetlocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::_internal_mutable_targetlocale() {
  _has_bits_[0] |= 0x00000800u;
  if (targetlocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    targetlocale_ = p;
  }
  return targetlocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* ArchivedTask::mutable_targetlocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.targetLocale)
  return _internal_mutable_targetlocale();
}
inline void ArchivedTask::set_allocated_targetlocale(::SolasMatch::Common::Protobufs::Models::Locale* targetlocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale_);
  }
  if (targetlocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetlocale)->GetArena();
    if (message_arena != submessage_arena) {
      targetlocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetlocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  targetlocale_ = targetlocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.targetLocale)
}

// optional int32 taskType = 10;
inline bool ArchivedTask::_internal_has_tasktype() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ArchivedTask::has_tasktype() const {
  return _internal_has_tasktype();
}
inline void ArchivedTask::clear_tasktype() {
  tasktype_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_tasktype() const {
  return tasktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::tasktype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskType)
  return _internal_tasktype();
}
inline void ArchivedTask::_internal_set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  tasktype_ = value;
}
inline void ArchivedTask::set_tasktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskType)
}

// optional string taskStatus = 11;
inline bool ArchivedTask::_internal_has_taskstatus() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ArchivedTask::has_taskstatus() const {
  return _internal_has_taskstatus();
}
inline void ArchivedTask::clear_taskstatus() {
  taskstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ArchivedTask::taskstatus() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
  return _internal_taskstatus();
}
inline void ArchivedTask::set_taskstatus(const std::string& value) {
  _internal_set_taskstatus(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}
inline std::string* ArchivedTask::mutable_taskstatus() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
  return _internal_mutable_taskstatus();
}
inline const std::string& ArchivedTask::_internal_taskstatus() const {
  return taskstatus_.Get();
}
inline void ArchivedTask::_internal_set_taskstatus(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  taskstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_taskstatus(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  taskstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}
inline void ArchivedTask::set_taskstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  taskstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}
inline void ArchivedTask::set_taskstatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  taskstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}
inline std::string* ArchivedTask::_internal_mutable_taskstatus() {
  _has_bits_[0] |= 0x00000010u;
  return taskstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_taskstatus() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
  if (!_internal_has_taskstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return taskstatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_taskstatus(std::string* taskstatus) {
  if (taskstatus != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  taskstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}
inline std::string* ArchivedTask::unsafe_arena_release_taskstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return taskstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_taskstatus(
    std::string* taskstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (taskstatus != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  taskstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      taskstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.taskStatus)
}

// optional bool published = 12;
inline bool ArchivedTask::_internal_has_published() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ArchivedTask::has_published() const {
  return _internal_has_published();
}
inline void ArchivedTask::clear_published() {
  published_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool ArchivedTask::_internal_published() const {
  return published_;
}
inline bool ArchivedTask::published() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.published)
  return _internal_published();
}
inline void ArchivedTask::_internal_set_published(bool value) {
  _has_bits_[0] |= 0x00010000u;
  published_ = value;
}
inline void ArchivedTask::set_published(bool value) {
  _internal_set_published(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.published)
}

// optional int32 version = 14;
inline bool ArchivedTask::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ArchivedTask::has_version() const {
  return _internal_has_version();
}
inline void ArchivedTask::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::version() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.version)
  return _internal_version();
}
inline void ArchivedTask::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  version_ = value;
}
inline void ArchivedTask::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.version)
}

// optional string fileName = 15;
inline bool ArchivedTask::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ArchivedTask::has_filename() const {
  return _internal_has_filename();
}
inline void ArchivedTask::clear_filename() {
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ArchivedTask::filename() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
  return _internal_filename();
}
inline void ArchivedTask::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}
inline std::string* ArchivedTask::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ArchivedTask::_internal_filename() const {
  return filename_.Get();
}
inline void ArchivedTask::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  filename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}
inline void ArchivedTask::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}
inline void ArchivedTask::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}
inline std::string* ArchivedTask::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000020u;
  return filename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_filename() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}
inline std::string* ArchivedTask::unsafe_arena_release_filename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return filename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_filename(
    std::string* filename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  filename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.fileName)
}

// optional string contentType = 16;
inline bool ArchivedTask::_internal_has_contenttype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ArchivedTask::has_contenttype() const {
  return _internal_has_contenttype();
}
inline void ArchivedTask::clear_contenttype() {
  contenttype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ArchivedTask::contenttype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
  return _internal_contenttype();
}
inline void ArchivedTask::set_contenttype(const std::string& value) {
  _internal_set_contenttype(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}
inline std::string* ArchivedTask::mutable_contenttype() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
  return _internal_mutable_contenttype();
}
inline const std::string& ArchivedTask::_internal_contenttype() const {
  return contenttype_.Get();
}
inline void ArchivedTask::_internal_set_contenttype(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  contenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_contenttype(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  contenttype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}
inline void ArchivedTask::set_contenttype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  contenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}
inline void ArchivedTask::set_contenttype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  contenttype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}
inline std::string* ArchivedTask::_internal_mutable_contenttype() {
  _has_bits_[0] |= 0x00000040u;
  return contenttype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_contenttype() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
  if (!_internal_has_contenttype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return contenttype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_contenttype(std::string* contenttype) {
  if (contenttype != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  contenttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contenttype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}
inline std::string* ArchivedTask::unsafe_arena_release_contenttype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return contenttype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_contenttype(
    std::string* contenttype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (contenttype != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  contenttype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      contenttype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.contentType)
}

// optional string uploadTime = 17;
inline bool ArchivedTask::_internal_has_uploadtime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ArchivedTask::has_uploadtime() const {
  return _internal_has_uploadtime();
}
inline void ArchivedTask::clear_uploadtime() {
  uploadtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ArchivedTask::uploadtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
  return _internal_uploadtime();
}
inline void ArchivedTask::set_uploadtime(const std::string& value) {
  _internal_set_uploadtime(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}
inline std::string* ArchivedTask::mutable_uploadtime() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
  return _internal_mutable_uploadtime();
}
inline const std::string& ArchivedTask::_internal_uploadtime() const {
  return uploadtime_.Get();
}
inline void ArchivedTask::_internal_set_uploadtime(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  uploadtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_uploadtime(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  uploadtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}
inline void ArchivedTask::set_uploadtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  uploadtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}
inline void ArchivedTask::set_uploadtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  uploadtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}
inline std::string* ArchivedTask::_internal_mutable_uploadtime() {
  _has_bits_[0] |= 0x00000080u;
  return uploadtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_uploadtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
  if (!_internal_has_uploadtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return uploadtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_uploadtime(std::string* uploadtime) {
  if (uploadtime != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  uploadtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uploadtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}
inline std::string* ArchivedTask::unsafe_arena_release_uploadtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return uploadtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_uploadtime(
    std::string* uploadtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uploadtime != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  uploadtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uploadtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.uploadTime)
}

// optional int32 userIdClaimed = 18;
inline bool ArchivedTask::_internal_has_useridclaimed() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ArchivedTask::has_useridclaimed() const {
  return _internal_has_useridclaimed();
}
inline void ArchivedTask::clear_useridclaimed() {
  useridclaimed_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_useridclaimed() const {
  return useridclaimed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::useridclaimed() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdClaimed)
  return _internal_useridclaimed();
}
inline void ArchivedTask::_internal_set_useridclaimed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  useridclaimed_ = value;
}
inline void ArchivedTask::set_useridclaimed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useridclaimed(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdClaimed)
}

// optional int32 userIdArchived = 19;
inline bool ArchivedTask::_internal_has_useridarchived() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ArchivedTask::has_useridarchived() const {
  return _internal_has_useridarchived();
}
inline void ArchivedTask::clear_useridarchived() {
  useridarchived_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_useridarchived() const {
  return useridarchived_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::useridarchived() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdArchived)
  return _internal_useridarchived();
}
inline void ArchivedTask::_internal_set_useridarchived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  useridarchived_ = value;
}
inline void ArchivedTask::set_useridarchived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useridarchived(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdArchived)
}

// optional string prerequisites = 20;
inline bool ArchivedTask::_internal_has_prerequisites() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ArchivedTask::has_prerequisites() const {
  return _internal_has_prerequisites();
}
inline void ArchivedTask::clear_prerequisites() {
  prerequisites_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ArchivedTask::prerequisites() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
  return _internal_prerequisites();
}
inline void ArchivedTask::set_prerequisites(const std::string& value) {
  _internal_set_prerequisites(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}
inline std::string* ArchivedTask::mutable_prerequisites() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
  return _internal_mutable_prerequisites();
}
inline const std::string& ArchivedTask::_internal_prerequisites() const {
  return prerequisites_.Get();
}
inline void ArchivedTask::_internal_set_prerequisites(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  prerequisites_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_prerequisites(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  prerequisites_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}
inline void ArchivedTask::set_prerequisites(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  prerequisites_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}
inline void ArchivedTask::set_prerequisites(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  prerequisites_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}
inline std::string* ArchivedTask::_internal_mutable_prerequisites() {
  _has_bits_[0] |= 0x00000100u;
  return prerequisites_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_prerequisites() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
  if (!_internal_has_prerequisites()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return prerequisites_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_prerequisites(std::string* prerequisites) {
  if (prerequisites != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  prerequisites_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prerequisites,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}
inline std::string* ArchivedTask::unsafe_arena_release_prerequisites() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return prerequisites_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_prerequisites(
    std::string* prerequisites) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prerequisites != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  prerequisites_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prerequisites, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.prerequisites)
}

// optional int32 userIdTaskCreator = 21;
inline bool ArchivedTask::_internal_has_useridtaskcreator() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ArchivedTask::has_useridtaskcreator() const {
  return _internal_has_useridtaskcreator();
}
inline void ArchivedTask::clear_useridtaskcreator() {
  useridtaskcreator_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::_internal_useridtaskcreator() const {
  return useridtaskcreator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ArchivedTask::useridtaskcreator() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdTaskCreator)
  return _internal_useridtaskcreator();
}
inline void ArchivedTask::_internal_set_useridtaskcreator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  useridtaskcreator_ = value;
}
inline void ArchivedTask::set_useridtaskcreator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useridtaskcreator(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.userIdTaskCreator)
}

// optional string archivedDate = 22;
inline bool ArchivedTask::_internal_has_archiveddate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ArchivedTask::has_archiveddate() const {
  return _internal_has_archiveddate();
}
inline void ArchivedTask::clear_archiveddate() {
  archiveddate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& ArchivedTask::archiveddate() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
  return _internal_archiveddate();
}
inline void ArchivedTask::set_archiveddate(const std::string& value) {
  _internal_set_archiveddate(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}
inline std::string* ArchivedTask::mutable_archiveddate() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
  return _internal_mutable_archiveddate();
}
inline const std::string& ArchivedTask::_internal_archiveddate() const {
  return archiveddate_.Get();
}
inline void ArchivedTask::_internal_set_archiveddate(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  archiveddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ArchivedTask::set_archiveddate(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  archiveddate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}
inline void ArchivedTask::set_archiveddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  archiveddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}
inline void ArchivedTask::set_archiveddate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  archiveddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}
inline std::string* ArchivedTask::_internal_mutable_archiveddate() {
  _has_bits_[0] |= 0x00000200u;
  return archiveddate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ArchivedTask::release_archiveddate() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
  if (!_internal_has_archiveddate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return archiveddate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ArchivedTask::set_allocated_archiveddate(std::string* archiveddate) {
  if (archiveddate != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  archiveddate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), archiveddate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}
inline std::string* ArchivedTask::unsafe_arena_release_archiveddate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return archiveddate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ArchivedTask::unsafe_arena_set_allocated_archiveddate(
    std::string* archiveddate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (archiveddate != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  archiveddate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      archiveddate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.ArchivedTask.archivedDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ArchivedTask_2eproto
