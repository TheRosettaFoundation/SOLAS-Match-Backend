// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
#include "Tag.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Project_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Project_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class Project;
class ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::Project* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Project>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class Project PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Project) */ {
 public:
  inline Project() : Project(nullptr) {};
  virtual ~Project();

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Project& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const final {
    return CreateMaybeMessage<Project>(nullptr);
  }

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Project_2eproto);
    return ::descriptor_table_Project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 12,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kDeadlineFieldNumber = 4,
    kImpactFieldNumber = 6,
    kReferenceFieldNumber = 7,
    kCreatedTimeFieldNumber = 9,
    kStatusFieldNumber = 10,
    kSourceLocaleFieldNumber = 11,
    kIdFieldNumber = 1,
    kOrganisationIdFieldNumber = 5,
    kWordCountFieldNumber = 8,
    kImageUploadedFieldNumber = 13,
    kImageApprovedFieldNumber = 14,
  };
  // repeated .SolasMatch.Common.Protobufs.Models.Tag tag = 12;
  int tag_size() const;
  private:
  int _internal_tag_size() const;
  public:
  void clear_tag();
  ::SolasMatch::Common::Protobufs::Models::Tag* mutable_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Tag >*
      mutable_tag();
  private:
  const ::SolasMatch::Common::Protobufs::Models::Tag& _internal_tag(int index) const;
  ::SolasMatch::Common::Protobufs::Models::Tag* _internal_add_tag();
  public:
  const ::SolasMatch::Common::Protobufs::Models::Tag& tag(int index) const;
  ::SolasMatch::Common::Protobufs::Models::Tag* add_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Tag >&
      tag() const;

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string deadline = 4;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const std::string& deadline() const;
  void set_deadline(const std::string& value);
  void set_deadline(std::string&& value);
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  std::string* mutable_deadline();
  std::string* release_deadline();
  void set_allocated_deadline(std::string* deadline);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_deadline();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_deadline(
      std::string* deadline);
  private:
  const std::string& _internal_deadline() const;
  void _internal_set_deadline(const std::string& value);
  std::string* _internal_mutable_deadline();
  public:

  // optional string impact = 6;
  bool has_impact() const;
  private:
  bool _internal_has_impact() const;
  public:
  void clear_impact();
  const std::string& impact() const;
  void set_impact(const std::string& value);
  void set_impact(std::string&& value);
  void set_impact(const char* value);
  void set_impact(const char* value, size_t size);
  std::string* mutable_impact();
  std::string* release_impact();
  void set_allocated_impact(std::string* impact);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_impact();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_impact(
      std::string* impact);
  private:
  const std::string& _internal_impact() const;
  void _internal_set_impact(const std::string& value);
  std::string* _internal_mutable_impact();
  public:

  // optional string reference = 7;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_reference();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_reference(
      std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // optional string createdTime = 9;
  bool has_createdtime() const;
  private:
  bool _internal_has_createdtime() const;
  public:
  void clear_createdtime();
  const std::string& createdtime() const;
  void set_createdtime(const std::string& value);
  void set_createdtime(std::string&& value);
  void set_createdtime(const char* value);
  void set_createdtime(const char* value, size_t size);
  std::string* mutable_createdtime();
  std::string* release_createdtime();
  void set_allocated_createdtime(std::string* createdtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createdtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createdtime(
      std::string* createdtime);
  private:
  const std::string& _internal_createdtime() const;
  void _internal_set_createdtime(const std::string& value);
  std::string* _internal_mutable_createdtime();
  public:

  // optional string status = 10;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 11;
  bool has_sourcelocale() const;
  private:
  bool _internal_has_sourcelocale() const;
  public:
  void clear_sourcelocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_sourcelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_sourcelocale();
  void set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_sourcelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_sourcelocale();
  public:
  void unsafe_arena_set_allocated_sourcelocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_sourcelocale();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 organisationId = 5;
  bool has_organisationid() const;
  private:
  bool _internal_has_organisationid() const;
  public:
  void clear_organisationid();
  ::PROTOBUF_NAMESPACE_ID::int32 organisationid() const;
  void set_organisationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_organisationid() const;
  void _internal_set_organisationid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 wordCount = 8;
  bool has_wordcount() const;
  private:
  bool _internal_has_wordcount() const;
  public:
  void clear_wordcount();
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount() const;
  void set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wordcount() const;
  void _internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool imageUploaded = 13;
  bool has_imageuploaded() const;
  private:
  bool _internal_has_imageuploaded() const;
  public:
  void clear_imageuploaded();
  bool imageuploaded() const;
  void set_imageuploaded(bool value);
  private:
  bool _internal_imageuploaded() const;
  void _internal_set_imageuploaded(bool value);
  public:

  // optional bool imageApproved = 14;
  bool has_imageapproved() const;
  private:
  bool _internal_has_imageapproved() const;
  public:
  void clear_imageapproved();
  bool imageapproved() const;
  void set_imageapproved(bool value);
  private:
  bool _internal_imageapproved() const;
  void _internal_set_imageapproved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Tag > tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deadline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr impact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 organisationid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wordcount_;
  bool imageuploaded_;
  bool imageapproved_;
  friend struct ::TableStruct_Project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Project

// optional int32 id = 1;
inline bool Project::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Project::has_id() const {
  return _internal_has_id();
}
inline void Project::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.id)
  return _internal_id();
}
inline void Project::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void Project::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.id)
}

// optional string title = 2;
inline bool Project::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Project::has_title() const {
  return _internal_has_title();
}
inline void Project::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Project::title() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.title)
  return _internal_title();
}
inline void Project::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.title)
}
inline std::string* Project::mutable_title() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.title)
  return _internal_mutable_title();
}
inline const std::string& Project::_internal_title() const {
  return title_.Get();
}
inline void Project::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.title)
}
inline void Project::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.title)
}
inline void Project::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.title)
}
inline std::string* Project::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_title() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.title)
}
inline std::string* Project::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.title)
}

// optional string description = 3;
inline bool Project::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Project::has_description() const {
  return _internal_has_description();
}
inline void Project::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.description)
  return _internal_description();
}
inline void Project::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.description)
}
inline std::string* Project::mutable_description() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.description)
  return _internal_mutable_description();
}
inline const std::string& Project::_internal_description() const {
  return description_.Get();
}
inline void Project::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.description)
}
inline void Project::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.description)
}
inline void Project::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.description)
}
inline std::string* Project::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.description)
}
inline std::string* Project::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.description)
}

// optional string deadline = 4;
inline bool Project::_internal_has_deadline() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Project::has_deadline() const {
  return _internal_has_deadline();
}
inline void Project::clear_deadline() {
  deadline_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Project::deadline() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.deadline)
  return _internal_deadline();
}
inline void Project::set_deadline(const std::string& value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.deadline)
}
inline std::string* Project::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.deadline)
  return _internal_mutable_deadline();
}
inline const std::string& Project::_internal_deadline() const {
  return deadline_.Get();
}
inline void Project::_internal_set_deadline(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_deadline(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.deadline)
}
inline void Project::set_deadline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.deadline)
}
inline void Project::set_deadline(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  deadline_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.deadline)
}
inline std::string* Project::_internal_mutable_deadline() {
  _has_bits_[0] |= 0x00000004u;
  return deadline_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_deadline() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.deadline)
  if (!_internal_has_deadline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_deadline(std::string* deadline) {
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deadline,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.deadline)
}
inline std::string* Project::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.deadline)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return deadline_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_deadline(
    std::string* deadline) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (deadline != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  deadline_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      deadline, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.deadline)
}

// optional int32 organisationId = 5;
inline bool Project::_internal_has_organisationid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Project::has_organisationid() const {
  return _internal_has_organisationid();
}
inline void Project::clear_organisationid() {
  organisationid_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_organisationid() const {
  return organisationid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::organisationid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.organisationId)
  return _internal_organisationid();
}
inline void Project::_internal_set_organisationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  organisationid_ = value;
}
inline void Project::set_organisationid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_organisationid(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.organisationId)
}

// optional string impact = 6;
inline bool Project::_internal_has_impact() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Project::has_impact() const {
  return _internal_has_impact();
}
inline void Project::clear_impact() {
  impact_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Project::impact() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.impact)
  return _internal_impact();
}
inline void Project::set_impact(const std::string& value) {
  _internal_set_impact(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.impact)
}
inline std::string* Project::mutable_impact() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.impact)
  return _internal_mutable_impact();
}
inline const std::string& Project::_internal_impact() const {
  return impact_.Get();
}
inline void Project::_internal_set_impact(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  impact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_impact(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  impact_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.impact)
}
inline void Project::set_impact(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  impact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.impact)
}
inline void Project::set_impact(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  impact_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.impact)
}
inline std::string* Project::_internal_mutable_impact() {
  _has_bits_[0] |= 0x00000008u;
  return impact_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_impact() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.impact)
  if (!_internal_has_impact()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return impact_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_impact(std::string* impact) {
  if (impact != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  impact_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), impact,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.impact)
}
inline std::string* Project::unsafe_arena_release_impact() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.impact)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return impact_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_impact(
    std::string* impact) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (impact != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  impact_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      impact, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.impact)
}

// optional string reference = 7;
inline bool Project::_internal_has_reference() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Project::has_reference() const {
  return _internal_has_reference();
}
inline void Project::clear_reference() {
  reference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Project::reference() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.reference)
  return _internal_reference();
}
inline void Project::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.reference)
}
inline std::string* Project::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.reference)
  return _internal_mutable_reference();
}
inline const std::string& Project::_internal_reference() const {
  return reference_.Get();
}
inline void Project::_internal_set_reference(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_reference(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  reference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.reference)
}
inline void Project::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.reference)
}
inline void Project::set_reference(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  reference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.reference)
}
inline std::string* Project::_internal_mutable_reference() {
  _has_bits_[0] |= 0x00000010u;
  return reference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_reference() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.reference)
  if (!_internal_has_reference()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return reference_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.reference)
}
inline std::string* Project::unsafe_arena_release_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.reference)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return reference_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_reference(
    std::string* reference) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (reference != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  reference_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      reference, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.reference)
}

// optional int32 wordCount = 8;
inline bool Project::_internal_has_wordcount() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Project::has_wordcount() const {
  return _internal_has_wordcount();
}
inline void Project::clear_wordcount() {
  wordcount_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::_internal_wordcount() const {
  return wordcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Project::wordcount() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.wordCount)
  return _internal_wordcount();
}
inline void Project::_internal_set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  wordcount_ = value;
}
inline void Project::set_wordcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wordcount(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.wordCount)
}

// optional string createdTime = 9;
inline bool Project::_internal_has_createdtime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Project::has_createdtime() const {
  return _internal_has_createdtime();
}
inline void Project::clear_createdtime() {
  createdtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Project::createdtime() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.createdTime)
  return _internal_createdtime();
}
inline void Project::set_createdtime(const std::string& value) {
  _internal_set_createdtime(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}
inline std::string* Project::mutable_createdtime() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.createdTime)
  return _internal_mutable_createdtime();
}
inline const std::string& Project::_internal_createdtime() const {
  return createdtime_.Get();
}
inline void Project::_internal_set_createdtime(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_createdtime(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  createdtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}
inline void Project::set_createdtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}
inline void Project::set_createdtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  createdtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}
inline std::string* Project::_internal_mutable_createdtime() {
  _has_bits_[0] |= 0x00000020u;
  return createdtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_createdtime() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.createdTime)
  if (!_internal_has_createdtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return createdtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_createdtime(std::string* createdtime) {
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  createdtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}
inline std::string* Project::unsafe_arena_release_createdtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.createdTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return createdtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_createdtime(
    std::string* createdtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createdtime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  createdtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createdtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.createdTime)
}

// optional string status = 10;
inline bool Project::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Project::has_status() const {
  return _internal_has_status();
}
inline void Project::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Project::status() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.status)
  return _internal_status();
}
inline void Project::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.status)
}
inline std::string* Project::mutable_status() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.status)
  return _internal_mutable_status();
}
inline const std::string& Project::_internal_status() const {
  return status_.Get();
}
inline void Project::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Project::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Project.status)
}
inline void Project::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Project.status)
}
inline void Project::set_status(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Project.status)
}
inline std::string* Project::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000040u;
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Project::release_status() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return status_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Project::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.status)
}
inline std::string* Project::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Project.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Project::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.status)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale sourceLocale = 11;
inline bool Project::_internal_has_sourcelocale() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || sourcelocale_ != nullptr);
  return value;
}
inline bool Project::has_sourcelocale() const {
  return _internal_has_sourcelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Project::_internal_sourcelocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = sourcelocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& Project::sourcelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.sourceLocale)
  return _internal_sourcelocale();
}
inline void Project::unsafe_arena_set_allocated_sourcelocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  sourcelocale_ = sourcelocale;
  if (sourcelocale) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Project.sourceLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Project::release_sourcelocale() {
  auto temp = unsafe_arena_release_sourcelocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Project::unsafe_arena_release_sourcelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Project.sourceLocale)
  _has_bits_[0] &= ~0x00000080u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = sourcelocale_;
  sourcelocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Project::_internal_mutable_sourcelocale() {
  _has_bits_[0] |= 0x00000080u;
  if (sourcelocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    sourcelocale_ = p;
  }
  return sourcelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* Project::mutable_sourcelocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.sourceLocale)
  return _internal_mutable_sourcelocale();
}
inline void Project::set_allocated_sourcelocale(::SolasMatch::Common::Protobufs::Models::Locale* sourcelocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale_);
  }
  if (sourcelocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sourcelocale)->GetArena();
    if (message_arena != submessage_arena) {
      sourcelocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sourcelocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sourcelocale_ = sourcelocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Project.sourceLocale)
}

// repeated .SolasMatch.Common.Protobufs.Models.Tag tag = 12;
inline int Project::_internal_tag_size() const {
  return tag_.size();
}
inline int Project::tag_size() const {
  return _internal_tag_size();
}
inline ::SolasMatch::Common::Protobufs::Models::Tag* Project::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Project.tag)
  return tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Tag >*
Project::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:SolasMatch.Common.Protobufs.Models.Project.tag)
  return &tag_;
}
inline const ::SolasMatch::Common::Protobufs::Models::Tag& Project::_internal_tag(int index) const {
  return tag_.Get(index);
}
inline const ::SolasMatch::Common::Protobufs::Models::Tag& Project::tag(int index) const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.tag)
  return _internal_tag(index);
}
inline ::SolasMatch::Common::Protobufs::Models::Tag* Project::_internal_add_tag() {
  return tag_.Add();
}
inline ::SolasMatch::Common::Protobufs::Models::Tag* Project::add_tag() {
  // @@protoc_insertion_point(field_add:SolasMatch.Common.Protobufs.Models.Project.tag)
  return _internal_add_tag();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Tag >&
Project::tag() const {
  // @@protoc_insertion_point(field_list:SolasMatch.Common.Protobufs.Models.Project.tag)
  return tag_;
}

// optional bool imageUploaded = 13;
inline bool Project::_internal_has_imageuploaded() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Project::has_imageuploaded() const {
  return _internal_has_imageuploaded();
}
inline void Project::clear_imageuploaded() {
  imageuploaded_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Project::_internal_imageuploaded() const {
  return imageuploaded_;
}
inline bool Project::imageuploaded() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.imageUploaded)
  return _internal_imageuploaded();
}
inline void Project::_internal_set_imageuploaded(bool value) {
  _has_bits_[0] |= 0x00000800u;
  imageuploaded_ = value;
}
inline void Project::set_imageuploaded(bool value) {
  _internal_set_imageuploaded(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.imageUploaded)
}

// optional bool imageApproved = 14;
inline bool Project::_internal_has_imageapproved() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Project::has_imageapproved() const {
  return _internal_has_imageapproved();
}
inline void Project::clear_imageapproved() {
  imageapproved_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Project::_internal_imageapproved() const {
  return imageapproved_;
}
inline bool Project::imageapproved() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Project.imageApproved)
  return _internal_imageapproved();
}
inline void Project::_internal_set_imageapproved(bool value) {
  _has_bits_[0] |= 0x00001000u;
  imageapproved_ = value;
}
inline void Project::set_imageapproved(bool value) {
  _internal_set_imageapproved(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Project.imageApproved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Project_2eproto
