// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BannedUser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BannedUser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BannedUser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BannedUser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BannedUser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BannedUser_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class BannedUser;
class BannedUserDefaultTypeInternal;
extern BannedUserDefaultTypeInternal _BannedUser_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::BannedUser* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::BannedUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class BannedUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.BannedUser) */ {
 public:
  inline BannedUser() : BannedUser(nullptr) {};
  virtual ~BannedUser();

  BannedUser(const BannedUser& from);
  BannedUser(BannedUser&& from) noexcept
    : BannedUser() {
    *this = ::std::move(from);
  }

  inline BannedUser& operator=(const BannedUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BannedUser& operator=(BannedUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BannedUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BannedUser* internal_default_instance() {
    return reinterpret_cast<const BannedUser*>(
               &_BannedUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BannedUser& a, BannedUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BannedUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BannedUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BannedUser* New() const final {
    return CreateMaybeMessage<BannedUser>(nullptr);
  }

  BannedUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BannedUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BannedUser& from);
  void MergeFrom(const BannedUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BannedUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.BannedUser";
  }
  protected:
  explicit BannedUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BannedUser_2eproto);
    return ::descriptor_table_BannedUser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 4,
    kBannedDateFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kUserIdAdminFieldNumber = 2,
    kBanTypeFieldNumber = 3,
  };
  // optional string comment = 4;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_comment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_comment(
      std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional string bannedDate = 5;
  bool has_banneddate() const;
  private:
  bool _internal_has_banneddate() const;
  public:
  void clear_banneddate();
  const std::string& banneddate() const;
  void set_banneddate(const std::string& value);
  void set_banneddate(std::string&& value);
  void set_banneddate(const char* value);
  void set_banneddate(const char* value, size_t size);
  std::string* mutable_banneddate();
  std::string* release_banneddate();
  void set_allocated_banneddate(std::string* banneddate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_banneddate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_banneddate(
      std::string* banneddate);
  private:
  const std::string& _internal_banneddate() const;
  void _internal_set_banneddate(const std::string& value);
  std::string* _internal_mutable_banneddate();
  public:

  // optional int32 userId = 1;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userIdAdmin = 2;
  bool has_useridadmin() const;
  private:
  bool _internal_has_useridadmin() const;
  public:
  void clear_useridadmin();
  ::PROTOBUF_NAMESPACE_ID::int32 useridadmin() const;
  void set_useridadmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_useridadmin() const;
  void _internal_set_useridadmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 banType = 3;
  bool has_bantype() const;
  private:
  bool _internal_has_bantype() const;
  public:
  void clear_bantype();
  ::PROTOBUF_NAMESPACE_ID::int32 bantype() const;
  void set_bantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bantype() const;
  void _internal_set_bantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.BannedUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr banneddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 useridadmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 bantype_;
  friend struct ::TableStruct_BannedUser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BannedUser

// optional int32 userId = 1;
inline bool BannedUser::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BannedUser::has_userid() const {
  return _internal_has_userid();
}
inline void BannedUser::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::userid() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.BannedUser.userId)
  return _internal_userid();
}
inline void BannedUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void BannedUser::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.BannedUser.userId)
}

// optional int32 userIdAdmin = 2;
inline bool BannedUser::_internal_has_useridadmin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BannedUser::has_useridadmin() const {
  return _internal_has_useridadmin();
}
inline void BannedUser::clear_useridadmin() {
  useridadmin_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::_internal_useridadmin() const {
  return useridadmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::useridadmin() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.BannedUser.userIdAdmin)
  return _internal_useridadmin();
}
inline void BannedUser::_internal_set_useridadmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  useridadmin_ = value;
}
inline void BannedUser::set_useridadmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_useridadmin(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.BannedUser.userIdAdmin)
}

// optional int32 banType = 3;
inline bool BannedUser::_internal_has_bantype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BannedUser::has_bantype() const {
  return _internal_has_bantype();
}
inline void BannedUser::clear_bantype() {
  bantype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::_internal_bantype() const {
  return bantype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BannedUser::bantype() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.BannedUser.banType)
  return _internal_bantype();
}
inline void BannedUser::_internal_set_bantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  bantype_ = value;
}
inline void BannedUser::set_bantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bantype(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.BannedUser.banType)
}

// optional string comment = 4;
inline bool BannedUser::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BannedUser::has_comment() const {
  return _internal_has_comment();
}
inline void BannedUser::clear_comment() {
  comment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BannedUser::comment() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
  return _internal_comment();
}
inline void BannedUser::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}
inline std::string* BannedUser::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
  return _internal_mutable_comment();
}
inline const std::string& BannedUser::_internal_comment() const {
  return comment_.Get();
}
inline void BannedUser::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BannedUser::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}
inline void BannedUser::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}
inline void BannedUser::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  comment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}
inline std::string* BannedUser::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000001u;
  return comment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BannedUser::release_comment() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BannedUser::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}
inline std::string* BannedUser::unsafe_arena_release_comment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return comment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BannedUser::unsafe_arena_set_allocated_comment(
    std::string* comment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  comment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      comment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.BannedUser.comment)
}

// optional string bannedDate = 5;
inline bool BannedUser::_internal_has_banneddate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BannedUser::has_banneddate() const {
  return _internal_has_banneddate();
}
inline void BannedUser::clear_banneddate() {
  banneddate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BannedUser::banneddate() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
  return _internal_banneddate();
}
inline void BannedUser::set_banneddate(const std::string& value) {
  _internal_set_banneddate(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}
inline std::string* BannedUser::mutable_banneddate() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
  return _internal_mutable_banneddate();
}
inline const std::string& BannedUser::_internal_banneddate() const {
  return banneddate_.Get();
}
inline void BannedUser::_internal_set_banneddate(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  banneddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BannedUser::set_banneddate(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  banneddate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}
inline void BannedUser::set_banneddate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  banneddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}
inline void BannedUser::set_banneddate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  banneddate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}
inline std::string* BannedUser::_internal_mutable_banneddate() {
  _has_bits_[0] |= 0x00000002u;
  return banneddate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BannedUser::release_banneddate() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
  if (!_internal_has_banneddate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return banneddate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BannedUser::set_allocated_banneddate(std::string* banneddate) {
  if (banneddate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  banneddate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), banneddate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}
inline std::string* BannedUser::unsafe_arena_release_banneddate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return banneddate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BannedUser::unsafe_arena_set_allocated_banneddate(
    std::string* banneddate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (banneddate != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  banneddate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      banneddate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.BannedUser.bannedDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BannedUser_2eproto
