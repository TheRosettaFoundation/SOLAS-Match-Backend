// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskUploadNotificationRequest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TaskUploadNotificationRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TaskUploadNotificationRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TaskUploadNotificationRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TaskUploadNotificationRequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TaskUploadNotificationRequest_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Requests {
class TaskUploadNotificationRequest;
class TaskUploadNotificationRequestDefaultTypeInternal;
extern TaskUploadNotificationRequestDefaultTypeInternal _TaskUploadNotificationRequest_default_instance_;
}  // namespace Requests
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Requests {

// ===================================================================

class TaskUploadNotificationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest) */ {
 public:
  inline TaskUploadNotificationRequest() : TaskUploadNotificationRequest(nullptr) {};
  virtual ~TaskUploadNotificationRequest();

  TaskUploadNotificationRequest(const TaskUploadNotificationRequest& from);
  TaskUploadNotificationRequest(TaskUploadNotificationRequest&& from) noexcept
    : TaskUploadNotificationRequest() {
    *this = ::std::move(from);
  }

  inline TaskUploadNotificationRequest& operator=(const TaskUploadNotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskUploadNotificationRequest& operator=(TaskUploadNotificationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskUploadNotificationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskUploadNotificationRequest* internal_default_instance() {
    return reinterpret_cast<const TaskUploadNotificationRequest*>(
               &_TaskUploadNotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskUploadNotificationRequest& a, TaskUploadNotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskUploadNotificationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskUploadNotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskUploadNotificationRequest* New() const final {
    return CreateMaybeMessage<TaskUploadNotificationRequest>(nullptr);
  }

  TaskUploadNotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskUploadNotificationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskUploadNotificationRequest& from);
  void MergeFrom(const TaskUploadNotificationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskUploadNotificationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest";
  }
  protected:
  explicit TaskUploadNotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TaskUploadNotificationRequest_2eproto);
    return ::descriptor_table_TaskUploadNotificationRequest_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 1,
    kTaskIdFieldNumber = 2,
    kFileVersionFieldNumber = 3,
  };
  // required string class_name = 1 [default = "TaskUploadNotificationRequest"];
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  void set_class_name(const std::string& value);
  void set_class_name(std::string&& value);
  void set_class_name(const char* value);
  void set_class_name(const char* value, size_t size);
  std::string* mutable_class_name();
  std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_class_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_class_name(
      std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional int32 task_id = 2;
  bool has_task_id() const;
  private:
  bool _internal_has_task_id() const;
  public:
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 file_version = 3;
  bool has_file_version() const;
  private:
  bool _internal_has_file_version() const;
  public:
  void clear_file_version();
  ::PROTOBUF_NAMESPACE_ID::int32 file_version() const;
  void set_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_version() const;
  void _internal_set_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_class_name_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_version_;
  friend struct ::TableStruct_TaskUploadNotificationRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskUploadNotificationRequest

// required string class_name = 1 [default = "TaskUploadNotificationRequest"];
inline bool TaskUploadNotificationRequest::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TaskUploadNotificationRequest::has_class_name() const {
  return _internal_has_class_name();
}
inline void TaskUploadNotificationRequest::clear_class_name() {
  class_name_.ClearToDefault(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TaskUploadNotificationRequest::class_name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  return _internal_class_name();
}
inline void TaskUploadNotificationRequest::set_class_name(const std::string& value) {
  _internal_set_class_name(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
inline std::string* TaskUploadNotificationRequest::mutable_class_name() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  return _internal_mutable_class_name();
}
inline const std::string& TaskUploadNotificationRequest::_internal_class_name() const {
  return class_name_.Get();
}
inline void TaskUploadNotificationRequest::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.Set(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), value, GetArena());
}
inline void TaskUploadNotificationRequest::set_class_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.Set(
    &::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
inline void TaskUploadNotificationRequest::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  class_name_.Set(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
inline void TaskUploadNotificationRequest::set_class_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  class_name_.Set(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
inline std::string* TaskUploadNotificationRequest::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000001u;
  return class_name_.Mutable(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), GetArena());
}
inline std::string* TaskUploadNotificationRequest::release_class_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return class_name_.ReleaseNonDefault(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), GetArena());
}
inline void TaskUploadNotificationRequest::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.SetAllocated(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(), class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}
inline std::string* TaskUploadNotificationRequest::unsafe_arena_release_class_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return class_name_.UnsafeArenaRelease(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(),
      GetArena());
}
inline void TaskUploadNotificationRequest::unsafe_arena_set_allocated_class_name(
    std::string* class_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  class_name_.UnsafeArenaSetAllocated(&::SolasMatch::Common::Protobufs::Requests::TaskUploadNotificationRequest::_i_give_permission_to_break_this_code_default_class_name_.get(),
      class_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.class_name)
}

// optional int32 task_id = 2;
inline bool TaskUploadNotificationRequest::_internal_has_task_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TaskUploadNotificationRequest::has_task_id() const {
  return _internal_has_task_id();
}
inline void TaskUploadNotificationRequest::clear_task_id() {
  task_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskUploadNotificationRequest::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskUploadNotificationRequest::task_id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.task_id)
  return _internal_task_id();
}
inline void TaskUploadNotificationRequest::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  task_id_ = value;
}
inline void TaskUploadNotificationRequest::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.task_id)
}

// optional int32 file_version = 3;
inline bool TaskUploadNotificationRequest::_internal_has_file_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TaskUploadNotificationRequest::has_file_version() const {
  return _internal_has_file_version();
}
inline void TaskUploadNotificationRequest::clear_file_version() {
  file_version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskUploadNotificationRequest::_internal_file_version() const {
  return file_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskUploadNotificationRequest::file_version() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.file_version)
  return _internal_file_version();
}
inline void TaskUploadNotificationRequest::_internal_set_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  file_version_ = value;
}
inline void TaskUploadNotificationRequest::set_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_version(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Requests.TaskUploadNotificationRequest.file_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Requests
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TaskUploadNotificationRequest_2eproto
