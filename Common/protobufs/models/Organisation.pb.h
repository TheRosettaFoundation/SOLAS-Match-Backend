// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Organisation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Organisation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Organisation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Organisation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Organisation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Organisation_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class Organisation;
class OrganisationDefaultTypeInternal;
extern OrganisationDefaultTypeInternal _Organisation_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::Organisation* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Organisation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class Organisation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.Organisation) */ {
 public:
  inline Organisation() : Organisation(nullptr) {};
  virtual ~Organisation();

  Organisation(const Organisation& from);
  Organisation(Organisation&& from) noexcept
    : Organisation() {
    *this = ::std::move(from);
  }

  inline Organisation& operator=(const Organisation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Organisation& operator=(Organisation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Organisation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Organisation* internal_default_instance() {
    return reinterpret_cast<const Organisation*>(
               &_Organisation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Organisation& a, Organisation& b) {
    a.Swap(&b);
  }
  inline void Swap(Organisation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Organisation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Organisation* New() const final {
    return CreateMaybeMessage<Organisation>(nullptr);
  }

  Organisation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Organisation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Organisation& from);
  void MergeFrom(const Organisation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Organisation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.Organisation";
  }
  protected:
  explicit Organisation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Organisation_2eproto);
    return ::descriptor_table_Organisation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kBiographyFieldNumber = 3,
    kHomepageFieldNumber = 4,
    kEmailFieldNumber = 5,
    kAddressFieldNumber = 6,
    kCityFieldNumber = 7,
    kCountryFieldNumber = 8,
    kRegionalFocusFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string biography = 3;
  bool has_biography() const;
  private:
  bool _internal_has_biography() const;
  public:
  void clear_biography();
  const std::string& biography() const;
  void set_biography(const std::string& value);
  void set_biography(std::string&& value);
  void set_biography(const char* value);
  void set_biography(const char* value, size_t size);
  std::string* mutable_biography();
  std::string* release_biography();
  void set_allocated_biography(std::string* biography);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_biography();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_biography(
      std::string* biography);
  private:
  const std::string& _internal_biography() const;
  void _internal_set_biography(const std::string& value);
  std::string* _internal_mutable_biography();
  public:

  // optional string homepage = 4;
  bool has_homepage() const;
  private:
  bool _internal_has_homepage() const;
  public:
  void clear_homepage();
  const std::string& homepage() const;
  void set_homepage(const std::string& value);
  void set_homepage(std::string&& value);
  void set_homepage(const char* value);
  void set_homepage(const char* value, size_t size);
  std::string* mutable_homepage();
  std::string* release_homepage();
  void set_allocated_homepage(std::string* homepage);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_homepage();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_homepage(
      std::string* homepage);
  private:
  const std::string& _internal_homepage() const;
  void _internal_set_homepage(const std::string& value);
  std::string* _internal_mutable_homepage();
  public:

  // optional string email = 5;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string address = 6;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_address(
      std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // optional string city = 7;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional string country = 8;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // optional string regionalFocus = 9;
  bool has_regionalfocus() const;
  private:
  bool _internal_has_regionalfocus() const;
  public:
  void clear_regionalfocus();
  const std::string& regionalfocus() const;
  void set_regionalfocus(const std::string& value);
  void set_regionalfocus(std::string&& value);
  void set_regionalfocus(const char* value);
  void set_regionalfocus(const char* value, size_t size);
  std::string* mutable_regionalfocus();
  std::string* release_regionalfocus();
  void set_allocated_regionalfocus(std::string* regionalfocus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_regionalfocus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_regionalfocus(
      std::string* regionalfocus);
  private:
  const std::string& _internal_regionalfocus() const;
  void _internal_set_regionalfocus(const std::string& value);
  std::string* _internal_mutable_regionalfocus();
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.Organisation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biography_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homepage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regionalfocus_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_Organisation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Organisation

// optional int32 id = 1;
inline bool Organisation::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Organisation::has_id() const {
  return _internal_has_id();
}
inline void Organisation::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Organisation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Organisation::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.id)
  return _internal_id();
}
inline void Organisation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
}
inline void Organisation::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.id)
}

// optional string name = 2;
inline bool Organisation::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Organisation::has_name() const {
  return _internal_has_name();
}
inline void Organisation::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Organisation::name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.name)
  return _internal_name();
}
inline void Organisation::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline std::string* Organisation::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.name)
  return _internal_mutable_name();
}
inline const std::string& Organisation::_internal_name() const {
  return name_.Get();
}
inline void Organisation::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline void Organisation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline void Organisation::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline std::string* Organisation::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.name)
}
inline std::string* Organisation::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.name)
}

// optional string biography = 3;
inline bool Organisation::_internal_has_biography() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Organisation::has_biography() const {
  return _internal_has_biography();
}
inline void Organisation::clear_biography() {
  biography_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Organisation::biography() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  return _internal_biography();
}
inline void Organisation::set_biography(const std::string& value) {
  _internal_set_biography(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline std::string* Organisation::mutable_biography() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  return _internal_mutable_biography();
}
inline const std::string& Organisation::_internal_biography() const {
  return biography_.Get();
}
inline void Organisation::_internal_set_biography(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_biography(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  biography_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline void Organisation::set_biography(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline void Organisation::set_biography(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline std::string* Organisation::_internal_mutable_biography() {
  _has_bits_[0] |= 0x00000002u;
  return biography_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_biography() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  if (!_internal_has_biography()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return biography_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_biography(std::string* biography) {
  if (biography != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biography_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biography,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}
inline std::string* Organisation::unsafe_arena_release_biography() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.biography)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return biography_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_biography(
    std::string* biography) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (biography != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  biography_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      biography, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.biography)
}

// optional string homepage = 4;
inline bool Organisation::_internal_has_homepage() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Organisation::has_homepage() const {
  return _internal_has_homepage();
}
inline void Organisation::clear_homepage() {
  homepage_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Organisation::homepage() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  return _internal_homepage();
}
inline void Organisation::set_homepage(const std::string& value) {
  _internal_set_homepage(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline std::string* Organisation::mutable_homepage() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  return _internal_mutable_homepage();
}
inline const std::string& Organisation::_internal_homepage() const {
  return homepage_.Get();
}
inline void Organisation::_internal_set_homepage(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  homepage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_homepage(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  homepage_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline void Organisation::set_homepage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  homepage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline void Organisation::set_homepage(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  homepage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline std::string* Organisation::_internal_mutable_homepage() {
  _has_bits_[0] |= 0x00000004u;
  return homepage_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_homepage() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  if (!_internal_has_homepage()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return homepage_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_homepage(std::string* homepage) {
  if (homepage != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  homepage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homepage,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}
inline std::string* Organisation::unsafe_arena_release_homepage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return homepage_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_homepage(
    std::string* homepage) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (homepage != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  homepage_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      homepage, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.homepage)
}

// optional string email = 5;
inline bool Organisation::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Organisation::has_email() const {
  return _internal_has_email();
}
inline void Organisation::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Organisation::email() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.email)
  return _internal_email();
}
inline void Organisation::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline std::string* Organisation::mutable_email() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.email)
  return _internal_mutable_email();
}
inline const std::string& Organisation::_internal_email() const {
  return email_.Get();
}
inline void Organisation::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline void Organisation::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline void Organisation::set_email(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline std::string* Organisation::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000008u;
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_email() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.email)
}
inline std::string* Organisation::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.email)
}

// optional string address = 6;
inline bool Organisation::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Organisation::has_address() const {
  return _internal_has_address();
}
inline void Organisation::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Organisation::address() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.address)
  return _internal_address();
}
inline void Organisation::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline std::string* Organisation::mutable_address() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.address)
  return _internal_mutable_address();
}
inline const std::string& Organisation::_internal_address() const {
  return address_.Get();
}
inline void Organisation::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline void Organisation::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline void Organisation::set_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline std::string* Organisation::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000010u;
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_address() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.address)
}
inline std::string* Organisation::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_address(
    std::string* address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.address)
}

// optional string city = 7;
inline bool Organisation::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Organisation::has_city() const {
  return _internal_has_city();
}
inline void Organisation::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Organisation::city() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.city)
  return _internal_city();
}
inline void Organisation::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline std::string* Organisation::mutable_city() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.city)
  return _internal_mutable_city();
}
inline const std::string& Organisation::_internal_city() const {
  return city_.Get();
}
inline void Organisation::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline void Organisation::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline void Organisation::set_city(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline std::string* Organisation::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000020u;
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_city() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return city_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.city)
}
inline std::string* Organisation::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.city)
}

// optional string country = 8;
inline bool Organisation::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Organisation::has_country() const {
  return _internal_has_country();
}
inline void Organisation::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Organisation::country() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.country)
  return _internal_country();
}
inline void Organisation::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline std::string* Organisation::mutable_country() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.country)
  return _internal_mutable_country();
}
inline const std::string& Organisation::_internal_country() const {
  return country_.Get();
}
inline void Organisation::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_country(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline void Organisation::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline void Organisation::set_country(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline std::string* Organisation::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000040u;
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_country() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.country)
}
inline std::string* Organisation::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.country)
}

// optional string regionalFocus = 9;
inline bool Organisation::_internal_has_regionalfocus() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Organisation::has_regionalfocus() const {
  return _internal_has_regionalfocus();
}
inline void Organisation::clear_regionalfocus() {
  regionalfocus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Organisation::regionalfocus() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  return _internal_regionalfocus();
}
inline void Organisation::set_regionalfocus(const std::string& value) {
  _internal_set_regionalfocus(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline std::string* Organisation::mutable_regionalfocus() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  return _internal_mutable_regionalfocus();
}
inline const std::string& Organisation::_internal_regionalfocus() const {
  return regionalfocus_.Get();
}
inline void Organisation::_internal_set_regionalfocus(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  regionalfocus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Organisation::set_regionalfocus(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  regionalfocus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline void Organisation::set_regionalfocus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  regionalfocus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline void Organisation::set_regionalfocus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  regionalfocus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline std::string* Organisation::_internal_mutable_regionalfocus() {
  _has_bits_[0] |= 0x00000080u;
  return regionalfocus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Organisation::release_regionalfocus() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  if (!_internal_has_regionalfocus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return regionalfocus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Organisation::set_allocated_regionalfocus(std::string* regionalfocus) {
  if (regionalfocus != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  regionalfocus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regionalfocus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}
inline std::string* Organisation::unsafe_arena_release_regionalfocus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return regionalfocus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Organisation::unsafe_arena_set_allocated_regionalfocus(
    std::string* regionalfocus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (regionalfocus != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  regionalfocus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      regionalfocus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.Organisation.regionalFocus)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Organisation_2eproto
