// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: User.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_User_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_User_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Locale.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_User_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_User_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_User_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::User* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.User) */ {
 public:
  inline User() : User(nullptr) {};
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_User_2eproto);
    return ::descriptor_table_User_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondaryLocalesFieldNumber = 9,
    kDisplayNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kBiographyFieldNumber = 5,
    kNonceFieldNumber = 6,
    kCreatedTimeFieldNumber = 7,
    kNativeLocaleFieldNumber = 8,
    kIdFieldNumber = 1,
  };
  // repeated .SolasMatch.Common.Protobufs.Models.Locale secondaryLocales = 9;
  int secondarylocales_size() const;
  private:
  int _internal_secondarylocales_size() const;
  public:
  void clear_secondarylocales();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_secondarylocales(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >*
      mutable_secondarylocales();
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_secondarylocales(int index) const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_add_secondarylocales();
  public:
  const ::SolasMatch::Common::Protobufs::Models::Locale& secondarylocales(int index) const;
  ::SolasMatch::Common::Protobufs::Models::Locale* add_secondarylocales();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >&
      secondarylocales() const;

  // optional string display_name = 2;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_display_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_display_name(
      std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string email = 3;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string biography = 5;
  bool has_biography() const;
  private:
  bool _internal_has_biography() const;
  public:
  void clear_biography();
  const std::string& biography() const;
  void set_biography(const std::string& value);
  void set_biography(std::string&& value);
  void set_biography(const char* value);
  void set_biography(const char* value, size_t size);
  std::string* mutable_biography();
  std::string* release_biography();
  void set_allocated_biography(std::string* biography);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_biography();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_biography(
      std::string* biography);
  private:
  const std::string& _internal_biography() const;
  void _internal_set_biography(const std::string& value);
  std::string* _internal_mutable_biography();
  public:

  // optional string nonce = 6;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const char* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // optional string created_time = 7;
  bool has_created_time() const;
  private:
  bool _internal_has_created_time() const;
  public:
  void clear_created_time();
  const std::string& created_time() const;
  void set_created_time(const std::string& value);
  void set_created_time(std::string&& value);
  void set_created_time(const char* value);
  void set_created_time(const char* value, size_t size);
  std::string* mutable_created_time();
  std::string* release_created_time();
  void set_allocated_created_time(std::string* created_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_created_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_created_time(
      std::string* created_time);
  private:
  const std::string& _internal_created_time() const;
  void _internal_set_created_time(const std::string& value);
  std::string* _internal_mutable_created_time();
  public:

  // optional .SolasMatch.Common.Protobufs.Models.Locale nativeLocale = 8;
  bool has_nativelocale() const;
  private:
  bool _internal_has_nativelocale() const;
  public:
  void clear_nativelocale();
  const ::SolasMatch::Common::Protobufs::Models::Locale& nativelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* release_nativelocale();
  ::SolasMatch::Common::Protobufs::Models::Locale* mutable_nativelocale();
  void set_allocated_nativelocale(::SolasMatch::Common::Protobufs::Models::Locale* nativelocale);
  private:
  const ::SolasMatch::Common::Protobufs::Models::Locale& _internal_nativelocale() const;
  ::SolasMatch::Common::Protobufs::Models::Locale* _internal_mutable_nativelocale();
  public:
  void unsafe_arena_set_allocated_nativelocale(
      ::SolasMatch::Common::Protobufs::Models::Locale* nativelocale);
  ::SolasMatch::Common::Protobufs::Models::Locale* unsafe_arena_release_nativelocale();

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale > secondarylocales_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biography_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_time_;
  ::SolasMatch::Common::Protobufs::Models::Locale* nativelocale_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_User_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// optional int32 id = 1;
inline bool User::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool User::has_id() const {
  return _internal_has_id();
}
inline void User::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 User::id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.id)
}

// optional string display_name = 2;
inline bool User::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User::has_display_name() const {
  return _internal_has_display_name();
}
inline void User::clear_display_name() {
  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User::display_name() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.display_name)
  return _internal_display_name();
}
inline void User::set_display_name(const std::string& value) {
  _internal_set_display_name(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline std::string* User::mutable_display_name() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.display_name)
  return _internal_mutable_display_name();
}
inline const std::string& User::_internal_display_name() const {
  return display_name_.Get();
}
inline void User::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_display_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline void User::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline void User::set_display_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline std::string* User::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000001u;
  return display_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_display_name() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return display_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.display_name)
}
inline std::string* User::unsafe_arena_release_display_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.display_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return display_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_display_name(
    std::string* display_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      display_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.display_name)
}

// optional string email = 3;
inline bool User::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User::has_email() const {
  return _internal_has_email();
}
inline void User::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.email)
  return _internal_email();
}
inline void User::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.email)
}
inline std::string* User::mutable_email() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.email)
  return _internal_mutable_email();
}
inline const std::string& User::_internal_email() const {
  return email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.email)
}
inline void User::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.email)
}
inline void User::set_email(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.email)
}
inline std::string* User::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000002u;
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return email_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.email)
}
inline std::string* User::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.email)
}

// optional string password = 4;
inline bool User::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool User::has_password() const {
  return _internal_has_password();
}
inline void User::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& User::password() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.password)
  return _internal_password();
}
inline void User::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.password)
}
inline std::string* User::mutable_password() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.password)
  return _internal_mutable_password();
}
inline const std::string& User::_internal_password() const {
  return password_.Get();
}
inline void User::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.password)
}
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.password)
}
inline void User::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.password)
}
inline std::string* User::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000004u;
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.password)
}
inline std::string* User::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.password)
}

// optional string biography = 5;
inline bool User::_internal_has_biography() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool User::has_biography() const {
  return _internal_has_biography();
}
inline void User::clear_biography() {
  biography_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& User::biography() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.biography)
  return _internal_biography();
}
inline void User::set_biography(const std::string& value) {
  _internal_set_biography(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline std::string* User::mutable_biography() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.biography)
  return _internal_mutable_biography();
}
inline const std::string& User::_internal_biography() const {
  return biography_.Get();
}
inline void User::_internal_set_biography(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_biography(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  biography_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline void User::set_biography(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline void User::set_biography(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  biography_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline std::string* User::_internal_mutable_biography() {
  _has_bits_[0] |= 0x00000008u;
  return biography_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_biography() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.biography)
  if (!_internal_has_biography()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return biography_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_biography(std::string* biography) {
  if (biography != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  biography_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biography,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.biography)
}
inline std::string* User::unsafe_arena_release_biography() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.biography)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return biography_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_biography(
    std::string* biography) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (biography != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  biography_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      biography, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.biography)
}

// optional string nonce = 6;
inline bool User::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool User::has_nonce() const {
  return _internal_has_nonce();
}
inline void User::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& User::nonce() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.nonce)
  return _internal_nonce();
}
inline void User::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline std::string* User::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& User::_internal_nonce() const {
  return nonce_.Get();
}
inline void User::_internal_set_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline void User::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline void User::set_nonce(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline std::string* User::_internal_mutable_nonce() {
  _has_bits_[0] |= 0x00000010u;
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_nonce() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.nonce)
  if (!_internal_has_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.nonce)
}
inline std::string* User::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.nonce)
}

// optional string created_time = 7;
inline bool User::_internal_has_created_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool User::has_created_time() const {
  return _internal_has_created_time();
}
inline void User::clear_created_time() {
  created_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& User::created_time() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.created_time)
  return _internal_created_time();
}
inline void User::set_created_time(const std::string& value) {
  _internal_set_created_time(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline std::string* User::mutable_created_time() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.created_time)
  return _internal_mutable_created_time();
}
inline const std::string& User::_internal_created_time() const {
  return created_time_.Get();
}
inline void User::_internal_set_created_time(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  created_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_created_time(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  created_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline void User::set_created_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  created_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline void User::set_created_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  created_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline std::string* User::_internal_mutable_created_time() {
  _has_bits_[0] |= 0x00000020u;
  return created_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_created_time() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.created_time)
  if (!_internal_has_created_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return created_time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_created_time(std::string* created_time) {
  if (created_time != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  created_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), created_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.created_time)
}
inline std::string* User::unsafe_arena_release_created_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.User.created_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return created_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_created_time(
    std::string* created_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (created_time != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  created_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      created_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.created_time)
}

// optional .SolasMatch.Common.Protobufs.Models.Locale nativeLocale = 8;
inline bool User::_internal_has_nativelocale() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || nativelocale_ != nullptr);
  return value;
}
inline bool User::has_nativelocale() const {
  return _internal_has_nativelocale();
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::_internal_nativelocale() const {
  const ::SolasMatch::Common::Protobufs::Models::Locale* p = nativelocale_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SolasMatch::Common::Protobufs::Models::Locale*>(
      &::SolasMatch::Common::Protobufs::Models::_Locale_default_instance_);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::nativelocale() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  return _internal_nativelocale();
}
inline void User::unsafe_arena_set_allocated_nativelocale(
    ::SolasMatch::Common::Protobufs::Models::Locale* nativelocale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nativelocale_);
  }
  nativelocale_ = nativelocale;
  if (nativelocale) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::release_nativelocale() {
  auto temp = unsafe_arena_release_nativelocale();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::unsafe_arena_release_nativelocale() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  _has_bits_[0] &= ~0x00000040u;
  ::SolasMatch::Common::Protobufs::Models::Locale* temp = nativelocale_;
  nativelocale_ = nullptr;
  return temp;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::_internal_mutable_nativelocale() {
  _has_bits_[0] |= 0x00000040u;
  if (nativelocale_ == nullptr) {
    auto* p = CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::Locale>(GetArena());
    nativelocale_ = p;
  }
  return nativelocale_;
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::mutable_nativelocale() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
  return _internal_mutable_nativelocale();
}
inline void User::set_allocated_nativelocale(::SolasMatch::Common::Protobufs::Models::Locale* nativelocale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nativelocale_);
  }
  if (nativelocale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nativelocale)->GetArena();
    if (message_arena != submessage_arena) {
      nativelocale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nativelocale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  nativelocale_ = nativelocale;
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.User.nativeLocale)
}

// repeated .SolasMatch.Common.Protobufs.Models.Locale secondaryLocales = 9;
inline int User::_internal_secondarylocales_size() const {
  return secondarylocales_.size();
}
inline int User::secondarylocales_size() const {
  return _internal_secondarylocales_size();
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::mutable_secondarylocales(int index) {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >*
User::mutable_secondarylocales() {
  // @@protoc_insertion_point(field_mutable_list:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return &secondarylocales_;
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::_internal_secondarylocales(int index) const {
  return secondarylocales_.Get(index);
}
inline const ::SolasMatch::Common::Protobufs::Models::Locale& User::secondarylocales(int index) const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return _internal_secondarylocales(index);
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::_internal_add_secondarylocales() {
  return secondarylocales_.Add();
}
inline ::SolasMatch::Common::Protobufs::Models::Locale* User::add_secondarylocales() {
  // @@protoc_insertion_point(field_add:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return _internal_add_secondarylocales();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SolasMatch::Common::Protobufs::Models::Locale >&
User::secondarylocales() const {
  // @@protoc_insertion_point(field_list:SolasMatch.Common.Protobufs.Models.User.secondaryLocales)
  return secondarylocales_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_User_2eproto
