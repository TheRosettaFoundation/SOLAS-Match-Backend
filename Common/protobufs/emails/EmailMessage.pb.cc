// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmailMessage.proto

#include "EmailMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Emails {
class EmailMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EmailMessage> _instance;
} _EmailMessage_default_instance_;
}  // namespace Emails
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
static void InitDefaultsscc_info_EmailMessage_EmailMessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SolasMatch::Common::Protobufs::Emails::_EmailMessage_default_instance_;
    new (ptr) ::SolasMatch::Common::Protobufs::Emails::EmailMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SolasMatch::Common::Protobufs::Emails::EmailMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EmailMessage_EmailMessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EmailMessage_EmailMessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_EmailMessage_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_EmailMessage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_EmailMessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_EmailMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SolasMatch::Common::Protobufs::Emails::EmailMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SolasMatch::Common::Protobufs::Emails::EmailMessage, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::SolasMatch::Common::Protobufs::Emails::EmailMessage, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SolasMatch::Common::Protobufs::Emails::EmailMessage, email_type_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::SolasMatch::Common::Protobufs::Emails::EmailMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SolasMatch::Common::Protobufs::Emails::_EmailMessage_default_instance_),
};

const char descriptor_table_protodef_EmailMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022EmailMessage.proto\022\"SolasMatch.Common."
  "Protobufs.Emails\"\240\010\n\014EmailMessage\022I\n\nema"
  "il_type\030\001 \002(\01625.SolasMatch.Common.Protob"
  "ufs.Emails.EmailMessage.Type\"\272\007\n\004Type\022\022\n"
  "\016TaskScoreEmail\020\001\022\021\n\rUserTaskClaim\020\002\022\031\n\025"
  "OrgMembershipAccepted\020\003\022\030\n\024OrgMembership"
  "Refused\020\004\022\026\n\022PasswordResetEmail\020\005\022\020\n\014Tas"
  "kArchived\020\006\022\017\n\013TaskClaimed\020\007\022\027\n\023TrackedT"
  "askUploaded\020\010\022\031\n\025OrgTaskDeadlinePassed\020\t"
  "\022!\n\035UserClaimedTaskDeadlinePassed\020\n\022\020\n\014U"
  "serFeedback\020\013\022\027\n\023UserTaskStreamEmail\020\014\022\025"
  "\n\021EmailVerification\020\r\022\017\n\013BannedLogin\020\016\022\034"
  "\n\030TrackedTaskSourceUpdated\020\017\022\027\n\023ClaimedT"
  "askUploaded\020\020\022\034\n\030ClaimedTaskSourceUpdate"
  "d\020\021\022\017\n\013OrgFeedback\020\022\022\027\n\023OrgCreatedSiteAd"
  "min\020\023\022\026\n\022OrgCreatedOrgAdmin\020\024\022\026\n\022UserRef"
  "erenceEmail\020\025\022\031\n\025UserBadgeAwardedEmail\020\026"
  "\022\025\n\021UserUnclaimedTask\020\027\022\030\n\024UserTaskRevok"
  "edEmail\020\030\022\027\n\023OrgTaskRevokedEmail\020\031\022\022\n\016Pr"
  "ojectCreated\020\032\022\021\n\rBannedFromOrg\020\033\022\037\n\033Use"
  "rBannedNotificationToOrg\020\034\022\035\n\031ProjectIma"
  "geUploadedEmail\020\035\022\034\n\030ProjectImageRemoved"
  "Email\020\036\022\035\n\031ProjectImageApprovedEmail\020\037\022 "
  "\n\034ProjectImageDisapprovedEmail\020 \022-\n)User"
  "ClaimedTaskEarlyWarningDeadlinePassed\020!\022"
  ",\n(UserClaimedTaskLateWarningDeadlinePas"
  "sed\020\"\022#\n\037UserRecordWarningDeadlinePassed"
  "\020#\022\025\n\021UserTaskCancelled\020$*\010\010d\020\200\200\200\200\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_EmailMessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_EmailMessage_2eproto_sccs[1] = {
  &scc_info_EmailMessage_EmailMessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_EmailMessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EmailMessage_2eproto = {
  false, false, descriptor_table_protodef_EmailMessage_2eproto, "EmailMessage.proto", 1115,
  &descriptor_table_EmailMessage_2eproto_once, descriptor_table_EmailMessage_2eproto_sccs, descriptor_table_EmailMessage_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_EmailMessage_2eproto::offsets,
  file_level_metadata_EmailMessage_2eproto, 1, file_level_enum_descriptors_EmailMessage_2eproto, file_level_service_descriptors_EmailMessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_EmailMessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_EmailMessage_2eproto)), true);
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Emails {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmailMessage_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_EmailMessage_2eproto);
  return file_level_enum_descriptors_EmailMessage_2eproto[0];
}
bool EmailMessage_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EmailMessage_Type EmailMessage::TaskScoreEmail;
constexpr EmailMessage_Type EmailMessage::UserTaskClaim;
constexpr EmailMessage_Type EmailMessage::OrgMembershipAccepted;
constexpr EmailMessage_Type EmailMessage::OrgMembershipRefused;
constexpr EmailMessage_Type EmailMessage::PasswordResetEmail;
constexpr EmailMessage_Type EmailMessage::TaskArchived;
constexpr EmailMessage_Type EmailMessage::TaskClaimed;
constexpr EmailMessage_Type EmailMessage::TrackedTaskUploaded;
constexpr EmailMessage_Type EmailMessage::OrgTaskDeadlinePassed;
constexpr EmailMessage_Type EmailMessage::UserClaimedTaskDeadlinePassed;
constexpr EmailMessage_Type EmailMessage::UserFeedback;
constexpr EmailMessage_Type EmailMessage::UserTaskStreamEmail;
constexpr EmailMessage_Type EmailMessage::EmailVerification;
constexpr EmailMessage_Type EmailMessage::BannedLogin;
constexpr EmailMessage_Type EmailMessage::TrackedTaskSourceUpdated;
constexpr EmailMessage_Type EmailMessage::ClaimedTaskUploaded;
constexpr EmailMessage_Type EmailMessage::ClaimedTaskSourceUpdated;
constexpr EmailMessage_Type EmailMessage::OrgFeedback;
constexpr EmailMessage_Type EmailMessage::OrgCreatedSiteAdmin;
constexpr EmailMessage_Type EmailMessage::OrgCreatedOrgAdmin;
constexpr EmailMessage_Type EmailMessage::UserReferenceEmail;
constexpr EmailMessage_Type EmailMessage::UserBadgeAwardedEmail;
constexpr EmailMessage_Type EmailMessage::UserUnclaimedTask;
constexpr EmailMessage_Type EmailMessage::UserTaskRevokedEmail;
constexpr EmailMessage_Type EmailMessage::OrgTaskRevokedEmail;
constexpr EmailMessage_Type EmailMessage::ProjectCreated;
constexpr EmailMessage_Type EmailMessage::BannedFromOrg;
constexpr EmailMessage_Type EmailMessage::UserBannedNotificationToOrg;
constexpr EmailMessage_Type EmailMessage::ProjectImageUploadedEmail;
constexpr EmailMessage_Type EmailMessage::ProjectImageRemovedEmail;
constexpr EmailMessage_Type EmailMessage::ProjectImageApprovedEmail;
constexpr EmailMessage_Type EmailMessage::ProjectImageDisapprovedEmail;
constexpr EmailMessage_Type EmailMessage::UserClaimedTaskEarlyWarningDeadlinePassed;
constexpr EmailMessage_Type EmailMessage::UserClaimedTaskLateWarningDeadlinePassed;
constexpr EmailMessage_Type EmailMessage::UserRecordWarningDeadlinePassed;
constexpr EmailMessage_Type EmailMessage::UserTaskCancelled;
constexpr EmailMessage_Type EmailMessage::Type_MIN;
constexpr EmailMessage_Type EmailMessage::Type_MAX;
constexpr int EmailMessage::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EmailMessage::InitAsDefaultInstance() {
}
class EmailMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<EmailMessage>()._has_bits_);
  static void set_has_email_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

EmailMessage::EmailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SolasMatch.Common.Protobufs.Emails.EmailMessage)
}
EmailMessage::EmailMessage(const EmailMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  email_type_ = from.email_type_;
  // @@protoc_insertion_point(copy_constructor:SolasMatch.Common.Protobufs.Emails.EmailMessage)
}

void EmailMessage::SharedCtor() {
  email_type_ = 1;
}

EmailMessage::~EmailMessage() {
  // @@protoc_insertion_point(destructor:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EmailMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EmailMessage::ArenaDtor(void* object) {
  EmailMessage* _this = reinterpret_cast< EmailMessage* >(object);
  (void)_this;
}
void EmailMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EmailMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmailMessage& EmailMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EmailMessage_EmailMessage_2eproto.base);
  return *internal_default_instance();
}


void EmailMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  email_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmailMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SolasMatch.Common.Protobufs.Emails.EmailMessage.Type email_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type_IsValid(val))) {
            _internal_set_email_type(static_cast<::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EmailMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SolasMatch.Common.Protobufs.Emails.EmailMessage.Type email_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_email_type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_._InternalSerialize(
      100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  return target;
}

size_t EmailMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  // required .SolasMatch.Common.Protobufs.Emails.EmailMessage.Type email_type = 1;
  if (_internal_has_email_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_email_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmailMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EmailMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SolasMatch.Common.Protobufs.Emails.EmailMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SolasMatch.Common.Protobufs.Emails.EmailMessage)
    MergeFrom(*source);
  }
}

void EmailMessage::MergeFrom(const EmailMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_email_type()) {
    _internal_set_email_type(from._internal_email_type());
  }
}

void EmailMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailMessage::CopyFrom(const EmailMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SolasMatch.Common.Protobufs.Emails.EmailMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailMessage::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EmailMessage::InternalSwap(EmailMessage* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(email_type_, other->email_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EmailMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Emails
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SolasMatch::Common::Protobufs::Emails::EmailMessage* Arena::CreateMaybeMessage< ::SolasMatch::Common::Protobufs::Emails::EmailMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SolasMatch::Common::Protobufs::Emails::EmailMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
