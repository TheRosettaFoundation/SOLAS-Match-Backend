// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EmailMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_EmailMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_EmailMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_EmailMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_EmailMessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_EmailMessage_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Emails {
class EmailMessage;
class EmailMessageDefaultTypeInternal;
extern EmailMessageDefaultTypeInternal _EmailMessage_default_instance_;
}  // namespace Emails
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Emails::EmailMessage* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Emails::EmailMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Emails {

enum EmailMessage_Type : int {
  EmailMessage_Type_TaskScoreEmail = 1,
  EmailMessage_Type_UserTaskClaim = 2,
  EmailMessage_Type_OrgMembershipAccepted = 3,
  EmailMessage_Type_OrgMembershipRefused = 4,
  EmailMessage_Type_PasswordResetEmail = 5,
  EmailMessage_Type_TaskArchived = 6,
  EmailMessage_Type_TaskClaimed = 7,
  EmailMessage_Type_TrackedTaskUploaded = 8,
  EmailMessage_Type_OrgTaskDeadlinePassed = 9,
  EmailMessage_Type_UserClaimedTaskDeadlinePassed = 10,
  EmailMessage_Type_UserFeedback = 11,
  EmailMessage_Type_UserTaskStreamEmail = 12,
  EmailMessage_Type_EmailVerification = 13,
  EmailMessage_Type_BannedLogin = 14,
  EmailMessage_Type_TrackedTaskSourceUpdated = 15,
  EmailMessage_Type_ClaimedTaskUploaded = 16,
  EmailMessage_Type_ClaimedTaskSourceUpdated = 17,
  EmailMessage_Type_OrgFeedback = 18,
  EmailMessage_Type_OrgCreatedSiteAdmin = 19,
  EmailMessage_Type_OrgCreatedOrgAdmin = 20,
  EmailMessage_Type_UserReferenceEmail = 21,
  EmailMessage_Type_UserBadgeAwardedEmail = 22,
  EmailMessage_Type_UserUnclaimedTask = 23,
  EmailMessage_Type_UserTaskRevokedEmail = 24,
  EmailMessage_Type_OrgTaskRevokedEmail = 25,
  EmailMessage_Type_ProjectCreated = 26,
  EmailMessage_Type_BannedFromOrg = 27,
  EmailMessage_Type_UserBannedNotificationToOrg = 28,
  EmailMessage_Type_ProjectImageUploadedEmail = 29,
  EmailMessage_Type_ProjectImageRemovedEmail = 30,
  EmailMessage_Type_ProjectImageApprovedEmail = 31,
  EmailMessage_Type_ProjectImageDisapprovedEmail = 32,
  EmailMessage_Type_UserClaimedTaskEarlyWarningDeadlinePassed = 33,
  EmailMessage_Type_UserClaimedTaskLateWarningDeadlinePassed = 34,
  EmailMessage_Type_UserRecordWarningDeadlinePassed = 35,
  EmailMessage_Type_UserTaskCancelled = 36
};
bool EmailMessage_Type_IsValid(int value);
constexpr EmailMessage_Type EmailMessage_Type_Type_MIN = EmailMessage_Type_TaskScoreEmail;
constexpr EmailMessage_Type EmailMessage_Type_Type_MAX = EmailMessage_Type_UserTaskCancelled;
constexpr int EmailMessage_Type_Type_ARRAYSIZE = EmailMessage_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmailMessage_Type_descriptor();
template<typename T>
inline const std::string& EmailMessage_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmailMessage_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmailMessage_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmailMessage_Type_descriptor(), enum_t_value);
}
inline bool EmailMessage_Type_Parse(
    const std::string& name, EmailMessage_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmailMessage_Type>(
    EmailMessage_Type_descriptor(), name, value);
}
// ===================================================================

class EmailMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Emails.EmailMessage) */ {
 public:
  inline EmailMessage() : EmailMessage(nullptr) {};
  virtual ~EmailMessage();

  EmailMessage(const EmailMessage& from);
  EmailMessage(EmailMessage&& from) noexcept
    : EmailMessage() {
    *this = ::std::move(from);
  }

  inline EmailMessage& operator=(const EmailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailMessage& operator=(EmailMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmailMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailMessage* internal_default_instance() {
    return reinterpret_cast<const EmailMessage*>(
               &_EmailMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmailMessage& a, EmailMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmailMessage* New() const final {
    return CreateMaybeMessage<EmailMessage>(nullptr);
  }

  EmailMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmailMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmailMessage& from);
  void MergeFrom(const EmailMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Emails.EmailMessage";
  }
  protected:
  explicit EmailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_EmailMessage_2eproto);
    return ::descriptor_table_EmailMessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EmailMessage_Type Type;
  static constexpr Type TaskScoreEmail =
    EmailMessage_Type_TaskScoreEmail;
  static constexpr Type UserTaskClaim =
    EmailMessage_Type_UserTaskClaim;
  static constexpr Type OrgMembershipAccepted =
    EmailMessage_Type_OrgMembershipAccepted;
  static constexpr Type OrgMembershipRefused =
    EmailMessage_Type_OrgMembershipRefused;
  static constexpr Type PasswordResetEmail =
    EmailMessage_Type_PasswordResetEmail;
  static constexpr Type TaskArchived =
    EmailMessage_Type_TaskArchived;
  static constexpr Type TaskClaimed =
    EmailMessage_Type_TaskClaimed;
  static constexpr Type TrackedTaskUploaded =
    EmailMessage_Type_TrackedTaskUploaded;
  static constexpr Type OrgTaskDeadlinePassed =
    EmailMessage_Type_OrgTaskDeadlinePassed;
  static constexpr Type UserClaimedTaskDeadlinePassed =
    EmailMessage_Type_UserClaimedTaskDeadlinePassed;
  static constexpr Type UserFeedback =
    EmailMessage_Type_UserFeedback;
  static constexpr Type UserTaskStreamEmail =
    EmailMessage_Type_UserTaskStreamEmail;
  static constexpr Type EmailVerification =
    EmailMessage_Type_EmailVerification;
  static constexpr Type BannedLogin =
    EmailMessage_Type_BannedLogin;
  static constexpr Type TrackedTaskSourceUpdated =
    EmailMessage_Type_TrackedTaskSourceUpdated;
  static constexpr Type ClaimedTaskUploaded =
    EmailMessage_Type_ClaimedTaskUploaded;
  static constexpr Type ClaimedTaskSourceUpdated =
    EmailMessage_Type_ClaimedTaskSourceUpdated;
  static constexpr Type OrgFeedback =
    EmailMessage_Type_OrgFeedback;
  static constexpr Type OrgCreatedSiteAdmin =
    EmailMessage_Type_OrgCreatedSiteAdmin;
  static constexpr Type OrgCreatedOrgAdmin =
    EmailMessage_Type_OrgCreatedOrgAdmin;
  static constexpr Type UserReferenceEmail =
    EmailMessage_Type_UserReferenceEmail;
  static constexpr Type UserBadgeAwardedEmail =
    EmailMessage_Type_UserBadgeAwardedEmail;
  static constexpr Type UserUnclaimedTask =
    EmailMessage_Type_UserUnclaimedTask;
  static constexpr Type UserTaskRevokedEmail =
    EmailMessage_Type_UserTaskRevokedEmail;
  static constexpr Type OrgTaskRevokedEmail =
    EmailMessage_Type_OrgTaskRevokedEmail;
  static constexpr Type ProjectCreated =
    EmailMessage_Type_ProjectCreated;
  static constexpr Type BannedFromOrg =
    EmailMessage_Type_BannedFromOrg;
  static constexpr Type UserBannedNotificationToOrg =
    EmailMessage_Type_UserBannedNotificationToOrg;
  static constexpr Type ProjectImageUploadedEmail =
    EmailMessage_Type_ProjectImageUploadedEmail;
  static constexpr Type ProjectImageRemovedEmail =
    EmailMessage_Type_ProjectImageRemovedEmail;
  static constexpr Type ProjectImageApprovedEmail =
    EmailMessage_Type_ProjectImageApprovedEmail;
  static constexpr Type ProjectImageDisapprovedEmail =
    EmailMessage_Type_ProjectImageDisapprovedEmail;
  static constexpr Type UserClaimedTaskEarlyWarningDeadlinePassed =
    EmailMessage_Type_UserClaimedTaskEarlyWarningDeadlinePassed;
  static constexpr Type UserClaimedTaskLateWarningDeadlinePassed =
    EmailMessage_Type_UserClaimedTaskLateWarningDeadlinePassed;
  static constexpr Type UserRecordWarningDeadlinePassed =
    EmailMessage_Type_UserRecordWarningDeadlinePassed;
  static constexpr Type UserTaskCancelled =
    EmailMessage_Type_UserTaskCancelled;
  static inline bool Type_IsValid(int value) {
    return EmailMessage_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EmailMessage_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EmailMessage_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EmailMessage_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EmailMessage_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EmailMessage_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return EmailMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailTypeFieldNumber = 1,
  };
  // required .SolasMatch.Common.Protobufs.Emails.EmailMessage.Type email_type = 1;
  bool has_email_type() const;
  private:
  bool _internal_has_email_type() const;
  public:
  void clear_email_type();
  ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type email_type() const;
  void set_email_type(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type value);
  private:
  ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type _internal_email_type() const;
  void _internal_set_email_type(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type value);
  public:

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EmailMessage)
  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Emails.EmailMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int email_type_;
  friend struct ::TableStruct_EmailMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailMessage

// required .SolasMatch.Common.Protobufs.Emails.EmailMessage.Type email_type = 1;
inline bool EmailMessage::_internal_has_email_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EmailMessage::has_email_type() const {
  return _internal_has_email_type();
}
inline void EmailMessage::clear_email_type() {
  email_type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type EmailMessage::_internal_email_type() const {
  return static_cast< ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type >(email_type_);
}
inline ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type EmailMessage::email_type() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Emails.EmailMessage.email_type)
  return _internal_email_type();
}
inline void EmailMessage::_internal_set_email_type(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type value) {
  assert(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  email_type_ = value;
}
inline void EmailMessage::set_email_type(::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type value) {
  _internal_set_email_type(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Emails.EmailMessage.email_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Emails
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type>() {
  return ::SolasMatch::Common::Protobufs::Emails::EmailMessage_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_EmailMessage_2eproto
