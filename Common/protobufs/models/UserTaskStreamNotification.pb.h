// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserTaskStreamNotification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_UserTaskStreamNotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_UserTaskStreamNotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_UserTaskStreamNotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_UserTaskStreamNotification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_UserTaskStreamNotification_2eproto;
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {
class UserTaskStreamNotification;
class UserTaskStreamNotificationDefaultTypeInternal;
extern UserTaskStreamNotificationDefaultTypeInternal _UserTaskStreamNotification_default_instance_;
}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch
PROTOBUF_NAMESPACE_OPEN
template<> ::SolasMatch::Common::Protobufs::Models::UserTaskStreamNotification* Arena::CreateMaybeMessage<::SolasMatch::Common::Protobufs::Models::UserTaskStreamNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SolasMatch {
namespace Common {
namespace Protobufs {
namespace Models {

// ===================================================================

class UserTaskStreamNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification) */ {
 public:
  inline UserTaskStreamNotification() : UserTaskStreamNotification(nullptr) {};
  virtual ~UserTaskStreamNotification();

  UserTaskStreamNotification(const UserTaskStreamNotification& from);
  UserTaskStreamNotification(UserTaskStreamNotification&& from) noexcept
    : UserTaskStreamNotification() {
    *this = ::std::move(from);
  }

  inline UserTaskStreamNotification& operator=(const UserTaskStreamNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTaskStreamNotification& operator=(UserTaskStreamNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserTaskStreamNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserTaskStreamNotification* internal_default_instance() {
    return reinterpret_cast<const UserTaskStreamNotification*>(
               &_UserTaskStreamNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserTaskStreamNotification& a, UserTaskStreamNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTaskStreamNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTaskStreamNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTaskStreamNotification* New() const final {
    return CreateMaybeMessage<UserTaskStreamNotification>(nullptr);
  }

  UserTaskStreamNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTaskStreamNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserTaskStreamNotification& from);
  void MergeFrom(const UserTaskStreamNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTaskStreamNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification";
  }
  protected:
  explicit UserTaskStreamNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_UserTaskStreamNotification_2eproto);
    return ::descriptor_table_UserTaskStreamNotification_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSentFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kIntervalFieldNumber = 2,
    kStrictFieldNumber = 4,
  };
  // optional string last_sent = 3;
  bool has_last_sent() const;
  private:
  bool _internal_has_last_sent() const;
  public:
  void clear_last_sent();
  const std::string& last_sent() const;
  void set_last_sent(const std::string& value);
  void set_last_sent(std::string&& value);
  void set_last_sent(const char* value);
  void set_last_sent(const char* value, size_t size);
  std::string* mutable_last_sent();
  std::string* release_last_sent();
  void set_allocated_last_sent(std::string* last_sent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_sent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_sent(
      std::string* last_sent);
  private:
  const std::string& _internal_last_sent() const;
  void _internal_set_last_sent(const std::string& value);
  std::string* _internal_mutable_last_sent();
  public:

  // optional int32 user_id = 1;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 interval = 2;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool strict = 4;
  bool has_strict() const;
  private:
  bool _internal_has_strict() const;
  public:
  void clear_strict();
  bool strict() const;
  void set_strict(bool value);
  private:
  bool _internal_strict() const;
  void _internal_set_strict(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_sent_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 interval_;
  bool strict_;
  friend struct ::TableStruct_UserTaskStreamNotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserTaskStreamNotification

// optional int32 user_id = 1;
inline bool UserTaskStreamNotification::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserTaskStreamNotification::has_user_id() const {
  return _internal_has_user_id();
}
inline void UserTaskStreamNotification::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTaskStreamNotification::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTaskStreamNotification::user_id() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.user_id)
  return _internal_user_id();
}
inline void UserTaskStreamNotification::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void UserTaskStreamNotification::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.user_id)
}

// optional int32 interval = 2;
inline bool UserTaskStreamNotification::_internal_has_interval() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserTaskStreamNotification::has_interval() const {
  return _internal_has_interval();
}
inline void UserTaskStreamNotification::clear_interval() {
  interval_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTaskStreamNotification::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTaskStreamNotification::interval() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.interval)
  return _internal_interval();
}
inline void UserTaskStreamNotification::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  interval_ = value;
}
inline void UserTaskStreamNotification::set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.interval)
}

// optional string last_sent = 3;
inline bool UserTaskStreamNotification::_internal_has_last_sent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserTaskStreamNotification::has_last_sent() const {
  return _internal_has_last_sent();
}
inline void UserTaskStreamNotification::clear_last_sent() {
  last_sent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserTaskStreamNotification::last_sent() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
  return _internal_last_sent();
}
inline void UserTaskStreamNotification::set_last_sent(const std::string& value) {
  _internal_set_last_sent(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}
inline std::string* UserTaskStreamNotification::mutable_last_sent() {
  // @@protoc_insertion_point(field_mutable:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
  return _internal_mutable_last_sent();
}
inline const std::string& UserTaskStreamNotification::_internal_last_sent() const {
  return last_sent_.Get();
}
inline void UserTaskStreamNotification::_internal_set_last_sent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserTaskStreamNotification::set_last_sent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_sent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}
inline void UserTaskStreamNotification::set_last_sent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}
inline void UserTaskStreamNotification::set_last_sent(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_sent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}
inline std::string* UserTaskStreamNotification::_internal_mutable_last_sent() {
  _has_bits_[0] |= 0x00000001u;
  return last_sent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserTaskStreamNotification::release_last_sent() {
  // @@protoc_insertion_point(field_release:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
  if (!_internal_has_last_sent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_sent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserTaskStreamNotification::set_allocated_last_sent(std::string* last_sent) {
  if (last_sent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_sent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_sent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}
inline std::string* UserTaskStreamNotification::unsafe_arena_release_last_sent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return last_sent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserTaskStreamNotification::unsafe_arena_set_allocated_last_sent(
    std::string* last_sent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_sent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_sent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_sent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.last_sent)
}

// optional bool strict = 4;
inline bool UserTaskStreamNotification::_internal_has_strict() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserTaskStreamNotification::has_strict() const {
  return _internal_has_strict();
}
inline void UserTaskStreamNotification::clear_strict() {
  strict_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UserTaskStreamNotification::_internal_strict() const {
  return strict_;
}
inline bool UserTaskStreamNotification::strict() const {
  // @@protoc_insertion_point(field_get:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.strict)
  return _internal_strict();
}
inline void UserTaskStreamNotification::_internal_set_strict(bool value) {
  _has_bits_[0] |= 0x00000008u;
  strict_ = value;
}
inline void UserTaskStreamNotification::set_strict(bool value) {
  _internal_set_strict(value);
  // @@protoc_insertion_point(field_set:SolasMatch.Common.Protobufs.Models.UserTaskStreamNotification.strict)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Models
}  // namespace Protobufs
}  // namespace Common
}  // namespace SolasMatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_UserTaskStreamNotification_2eproto
